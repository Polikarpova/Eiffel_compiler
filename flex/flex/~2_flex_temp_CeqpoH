#line 0 "eiffel.flex.c"


#line 0 "eiffel.flex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */











#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif




























/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))






























/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */


/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */



/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]



/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;


void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );


static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );


void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext






static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[344] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       60,   59,   58,   49,    7,   50,    1,   39,   40,   24,
       22,   47,   23,   46,   25,   55,   55,   45,   38,   26,
       20,   28,   48,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   43,   44,   30,   41,   42,    3,    5,    5,    6,
        5,    8,    9,   59,   17,   18,   58,   16,   55,   55,
       56,   21,   56,    0,   55,   19,   27,   29,   57,   57,
       57,   57,   51,   57,   57,   57,   57,   57,   57,   57,
       51,   57,   57,   57,   57,   57,   57,   51,   57,   57,

       57,   57,   57,   57,   57,   57,   33,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   14,   10,
       13,   15,   11,   12,    2,   55,   56,   57,   57,   51,
       31,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   51,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   34,   57,   51,   57,   57,
        0,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   32,   57,
       57,    0,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   51,   57,   57,   57,   57,   57,   57,   51,

       57,   57,   57,   57,   57,   51,   57,   51,   51,   57,
       51,   51,    0,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   51,   52,   57,   57,   57,   57,   53,
       51,   51,   51,    0,   57,   57,   57,   51,   51,   57,
       57,   57,   51,   57,   57,   57,   57,   57,   57,   52,
       57,   57,   57,   57,   57,   57,   51,   57,    0,   57,
       57,   57,   57,   57,   57,   57,   51,   57,   57,   51,
       57,   51,   57,    0,   57,   51,   57,   57,   51,   57,
       57,   51,   51,   57,   51,   57,   57,   51,   57,   57,
       57,   57,   57,    0,   57,   57,   57,   51,   57,   51,

       51,   51,   57,   57,   57,    0,   57,   57,   51,   51,
       57,   57,   57,   51,   37,   51,   51,   57,   57,   36,
       51,   57,   57,   51,   57,   57,   51,   35,   51,   57,
       51,   51,   51,   57,   51,   57,   51,   51,   51,   51,
       51,   51,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   35,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,    1,   83,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[85] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1,    1,    1
    } ;

static const flex_int16_t yy_base[349] =
    {   0,
        0,    0,    0,    0,   77,   79,   83,   84,  191,  182,
      173,  705,   91,  705,  705,  705,  705,  705,  705,  705,
      705,  705,   81,   79,  113,   85,   89,  105,  705,  102,
      705,   98,  705,   74,    0,   83,   72,   85,  101,  107,
      117,   69,  128,   67,  105,  130,  135,  124,  158,  128,
      130,  705,  705,  705,  705,  705,  705,  705,  171,  705,
      133,  705,  705,  197,  705,  705,  186,  705,  705,   96,
      194,  705,  199,  203,  207,  705,  705,  705,    0,  153,
      190,  178,  165,  175,  199,  205,  194,  204,  194,  216,
        0,  197,  215,  208,  214,  219,  212,    0,  213,  244,

      220,  240,  219,  226,  244,  264,  254,  255,  267,  266,
      263,  241,  249,  284,  252,  280,  285,  259,  705,  705,
      705,  705,  705,  705,  705,  316,  329,  280,  296,    0,
      322,  296,  295,  312,  299,  303,  325,  311,  309,  322,
      326,    0,  312,  334,  332,  320,  320,  338,  330,  339,
      331,  344,  347,  352,  334,  349,  341,    0,  356,  340,
      362,  368,  371,  373,  381,  367,  386,  373,  388,  395,
      385,  392,  388,  396,  393,  394,  404,  392,    0,  390,
      392,  392,  395,  409,  410,  411,  404,  420,  411,  421,
      428,  420,  434,  428,  434,  431,  433,  449,  437,    0,

      450,  450,  444,  455,  445,    0,  452,    0,    0,  453,
        0,    0,  455,  457,  449,  465,  460,  466,  456,  468,
      457,  480,  469,    0,    0,  479,  483,  484,  497,    0,
        0,    0,    0,  493,  496,  494,  503,    0,    0,  491,
      506,  499,    0,  498,  512,  514,  517,  503,  510,    0,
      507,  513,  523,  521,  528,  524,    0,  529,  518,  521,
      523,  535,  540,  529,  543,  531,    0,  536,  557,    0,
      551,    0,  549,  561,  563,    0,  551,  553,    0,  554,
      564,    0,    0,  573,    0,  579,  577,    0,  565,  565,
      567,  587,  570,  587,  589,  577,  584,    0,  596,    0,

        0,    0,  585,  592,  587,  594,  596,  592,    0,    0,
      612,  614,  609,    0,    0,    0,    0,  608,  619,  705,
        0,  612,  624,    0,  625,  626,    0,  705,    0,  628,
        0,    0,    0,  619,    0,  623,    0,    0,    0,    0,
        0,    0,  705,  696,  698,  700,  702,  115
    } ;

static const flex_int16_t yy_def[349] =
    {   0,
      343,    1,  344,  344,  345,  345,  346,  346,  347,  347,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      343,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  343,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  343,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  343,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  343,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  343,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  343,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  343,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  343,
      348,  348,  348,  348,  348,  348,  348,  343,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,    0,  343,  343,  343,  343,  343
    } ;

static const flex_int16_t yy_nxt[790] =
    {   0,
       12,   13,   13,   13,   14,   15,   16,   12,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   35,   35,   40,   35,   35,   41,   35,   42,   43,
       44,   35,   45,   46,   47,   48,   49,   50,   51,   35,
       35,   52,   12,   53,   54,   12,   34,   35,   36,   37,
       38,   39,   35,   35,   40,   35,   41,   35,   42,   43,
       44,   35,   45,   46,   47,   48,   49,   50,   51,   35,
       35,   55,   56,   57,   59,   60,   59,   60,   63,   63,
       64,   64,   67,   67,   67,   68,   71,   71,   69,   70,

       73,   90,   74,   74,   73,   80,   75,   75,  103,  108,
       81,   91,   82,  126,  126,   85,   79,   83,   84,   86,
       78,   92,   87,   93,   77,   88,   95,   76,   89,   61,
       96,   61,   90,   94,  109,   72,   80,   98,  103,  108,
       81,   91,   82,   97,   99,  100,   85,   83,   84,   86,
      101,   92,   87,   93,  104,   88,  102,   95,   89,  110,
      117,   96,  114,   94,  105,  109,  106,  111,   98,  118,
      107,  125,  343,   97,   99,  100,  119,  112,  120,  121,
      113,  101,  128,  115,   66,  104,  102,   67,   67,   67,
      110,  117,  114,   66,  105,  343,  106,  116,  111,  118,

      107,  125,  119,  122,  120,  121,  131,  112,  132,  123,
      113,   71,   71,  128,  115,  124,  127,  127,   73,  133,
       74,   74,   73,  129,   75,   75,  130,  116,  134,  122,
      135,  343,  136,  137,  122,  123,  138,  131,  132,  123,
      141,  124,  139,  142,  147,  124,  140,  343,  144,  133,
      146,  148,  145,  149,  129,  153,  130,  161,  143,  134,
      122,  135,  136,  156,  137,  123,  138,  154,  343,  157,
      141,  124,  158,  139,  142,  147,  150,  140,  144,  155,
      146,  148,  145,  149,  163,  153,  172,  151,  143,  173,
      152,  159,  171,  156,  176,  164,  343,  162,  154,  157,

      160,  179,  169,  158,  343,  165,  170,  150,  166,  155,
      167,  168,  174,  177,  178,  163,  172,  151,  180,  173,
      152,  181,  159,  171,  176,  182,  164,  162,  175,  184,
      160,  179,  169,  126,  126,  165,  170,  185,  166,  186,
      167,  168,  187,  174,  177,  178,  127,  127,  180,  188,
      189,  192,  181,  190,  191,  193,  343,  194,  175,  195,
      184,  197,  343,  198,  199,  183,  202,  185,  203,  205,
      186,  204,  187,  196,  208,  200,  206,  207,  209,  188,
      210,  189,  192,  190,  191,  211,  193,  194,  201,  212,
      195,  213,  197,  198,  199,  183,  202,  214,  215,  203,

      205,  204,  216,  196,  208,  200,  217,  206,  207,  209,
      210,  162,  218,  219,  343,  221,  211,  222,  201,  212,
      223,  225,  213,  224,  226,  227,  228,  229,  214,  215,
      231,  220,  230,  216,  232,  233,  234,  217,  183,  235,
      236,  162,  218,  237,  219,  221,  238,  239,  222,  240,
      242,  223,  225,  224,  226,  241,  227,  228,  229,  243,
      231,  220,  244,  230,  232,  233,  234,  245,  183,  235,
      246,  236,  247,  248,  237,  249,  238,  239,  250,  252,
      240,  242,  251,  253,  255,  241,  254,  256,  257,  258,
      243,  259,  244,  260,  261,  262,  343,  263,  245,  264,

      246,  265,  247,  248,  266,  249,  267,  268,  270,  250,
      252,  269,  251,  271,  253,  255,  254,  256,  257,  258,
      272,  259,  273,  260,  261,  274,  262,  263,  275,  277,
      264,  265,  276,  278,  266,  279,  267,  280,  268,  270,
      281,  269,  282,  283,  271,  284,  343,  285,  286,  287,
      272,  288,  289,  273,  290,  291,  274,  292,  293,  275,
      277,  294,  276,  278,  295,  296,  279,  280,  297,  298,
      281,  299,  300,  282,  283,  301,  284,  285,  286,  287,
      302,  288,  303,  289,  304,  290,  291,  305,  292,  293,
      306,  294,  307,  311,  295,  296,  308,  309,  310,  297,

      298,  299,  312,  300,  313,  301,  314,  343,  315,  316,
      302,  317,  318,  303,  319,  304,  320,  305,  321,  343,
      322,  306,  323,  307,  311,  324,  308,  309,  310,  325,
      326,  327,  328,  312,  329,  313,  330,  314,  315,  316,
      331,  317,  332,  318,  319,  333,  334,  320,  335,  321,
      322,  336,  323,  337,  338,  339,  324,  340,  343,  325,
      326,  327,  328,  341,  329,  342,  330,  343,  343,  343,
      343,  331,  343,  332,  343,  333,  334,  343,  343,  335,
      343,  336,  343,  343,  337,  338,  339,  343,  340,  343,
      343,  343,  343,  341,  343,  342,   12,   12,   58,   58,

       62,   62,   65,   65,   11,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343
    } ;

static const flex_int16_t yy_chk[790] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    6,    6,    7,    8,
        7,    8,   13,   13,   13,   23,   24,   24,   23,   23,

       26,   37,   26,   26,   27,   34,   27,   27,   42,   44,
       34,   37,   34,   70,   70,   36,  348,   34,   34,   36,
       32,   38,   36,   38,   30,   36,   39,   28,   36,    5,
       39,    6,   37,   38,   45,   25,   34,   40,   42,   44,
       34,   37,   34,   39,   40,   40,   36,   34,   34,   36,
       41,   38,   36,   38,   43,   36,   41,   39,   36,   46,
       50,   39,   48,   38,   43,   45,   43,   47,   40,   51,
       43,   61,   11,   39,   40,   40,   59,   47,   59,   59,
       47,   41,   80,   49,   10,   43,   41,   67,   67,   67,
       46,   50,   48,    9,   43,    0,   43,   49,   47,   51,

       43,   61,   64,   59,   64,   64,   82,   47,   83,   59,
       47,   71,   71,   80,   49,   59,   73,   73,   74,   84,
       74,   74,   75,   81,   75,   75,   81,   49,   85,   64,
       86,    0,   87,   88,   59,   64,   89,   82,   83,   59,
       92,   64,   90,   93,   96,   59,   90,    0,   94,   84,
       95,   97,   94,   99,   81,  101,   81,  107,   93,   85,
       64,   86,   87,  103,   88,   64,   89,  102,    0,  104,
       92,   64,  105,   90,   93,   96,  100,   90,   94,  102,
       95,   97,   94,   99,  108,  101,  112,  100,   93,  113,
      100,  106,  111,  103,  115,  109,    0,  107,  102,  104,

      106,  118,  110,  105,    0,  109,  110,  100,  109,  102,
      109,  109,  114,  116,  117,  108,  112,  100,  128,  113,
      100,  129,  106,  111,  115,  131,  109,  107,  114,  132,
      106,  118,  110,  126,  126,  109,  110,  133,  109,  134,
      109,  109,  135,  114,  116,  117,  127,  127,  128,  136,
      137,  140,  129,  138,  139,  141,    0,  143,  114,  144,
      132,  145,    0,  146,  147,  131,  149,  133,  150,  152,
      134,  151,  135,  144,  155,  148,  153,  154,  156,  136,
      157,  137,  140,  138,  139,  159,  141,  143,  148,  160,
      144,  161,  145,  146,  147,  131,  149,  162,  163,  150,

      152,  151,  164,  144,  155,  148,  165,  153,  154,  156,
      157,  162,  166,  167,    0,  168,  159,  169,  148,  160,
      170,  172,  161,  171,  173,  174,  175,  176,  162,  163,
      178,  167,  177,  164,  180,  181,  182,  165,  183,  183,
      184,  162,  166,  185,  167,  168,  186,  187,  169,  188,
      190,  170,  172,  171,  173,  189,  174,  175,  176,  191,
      178,  167,  192,  177,  180,  181,  182,  193,  183,  183,
      194,  184,  195,  196,  185,  197,  186,  187,  198,  201,
      188,  190,  199,  202,  204,  189,  203,  205,  207,  210,
      191,  213,  192,  214,  215,  216,    0,  217,  193,  218,

      194,  219,  195,  196,  220,  197,  221,  222,  226,  198,
      201,  223,  199,  227,  202,  204,  203,  205,  207,  210,
      228,  213,  229,  214,  215,  234,  216,  217,  235,  237,
      218,  219,  236,  240,  220,  241,  221,  242,  222,  226,
      244,  223,  245,  246,  227,  247,    0,  248,  249,  251,
      228,  252,  253,  229,  254,  255,  234,  256,  258,  235,
      237,  259,  236,  240,  260,  261,  241,  242,  262,  263,
      244,  264,  265,  245,  246,  266,  247,  248,  249,  251,
      268,  252,  269,  253,  271,  254,  255,  273,  256,  258,
      274,  259,  275,  281,  260,  261,  277,  278,  280,  262,

      263,  264,  284,  265,  286,  266,  287,    0,  289,  290,
      268,  291,  292,  269,  293,  271,  294,  273,  295,    0,
      296,  274,  297,  275,  281,  299,  277,  278,  280,  303,
      304,  305,  306,  284,  307,  286,  308,  287,  289,  290,
      311,  291,  312,  292,  293,  313,  318,  294,  319,  295,
      296,  322,  297,  323,  325,  326,  299,  330,    0,  303,
      304,  305,  306,  334,  307,  336,  308,    0,    0,    0,
        0,  311,    0,  312,    0,  313,  318,    0,    0,  319,
        0,  322,    0,    0,  323,  325,  326,    0,  330,    0,
        0,    0,    0,  334,    0,  336,  344,  344,  345,  345,

      346,  346,  347,  347,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[60] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "eiffel.flex"
#line 2 "eiffel.flex"
	#include <math.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <conio.h>
	#include <locale.h> 

#line 0 "eiffel.flex.c"




#line 0 "eiffel.flex.c"



#define INITIAL 0
#define SPECIAL_CHAR 1
#define SINGLE_QUOTED_CHAR 2
#define DOUBLE_QUOTED_STRING 3
#define SINGLE_LINE_COMMENT 4




    
/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif




static int yy_init_globals ( void );


/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( void );



int yyget_debug ( void );



void yyset_debug ( int debug_flag  );



YY_EXTRA_TYPE yyget_extra ( void );



void yyset_extra ( YY_EXTRA_TYPE user_defined  );



FILE *yyget_in ( void );



void yyset_in  ( FILE * _in_str  );



FILE *yyget_out ( void );



void yyset_out  ( FILE * _out_str  );



			int yyget_leng ( void );



char *yyget_text ( void );



int yyget_lineno ( void );



void yyset_lineno ( int _line_number  );







/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1









extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


