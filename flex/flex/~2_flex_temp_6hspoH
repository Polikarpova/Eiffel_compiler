#line 0 "eiffel.flex.c"


#line 0 "eiffel.flex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */











#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif




























/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))






























/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */


/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */



/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]



/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;


void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );


static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );


void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext






static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 56
#define YY_END_OF_BUFFER 57
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[334] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,   56,   55,   46,    7,   49,    1,   36,   37,   25,
       23,   44,   24,   43,   26,   52,   52,   42,   35,   27,
       21,   29,   45,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   40,   41,   31,   38,   39,    3,    5,    5,    6,
        5,    8,    9,   56,   17,   18,   55,   16,   52,   52,
       53,   22,   53,    0,   52,   20,   28,   30,   54,   54,
       54,   54,   19,   54,   54,   54,   54,   54,   54,   54,
       19,   54,   54,   54,   54,   54,   54,   19,   54,   54,

       54,   54,   54,   54,   54,   54,   19,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   14,   10,
       13,   15,   11,   12,    2,   52,   53,   54,   54,   19,
       19,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   19,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   19,   54,   19,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   19,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       19,   54,   54,   54,   54,   54,   54,   19,   54,   54,

       54,   54,   54,   19,   54,   19,   19,   54,   19,   19,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       19,   50,   54,   54,   54,   54,   51,   19,   19,   19,
       54,   54,   54,   19,   19,   54,   54,   54,   19,   54,
       54,   54,   54,   54,   54,   50,   54,   54,   54,   54,
       54,   54,   19,   54,   54,   54,   54,   54,   54,   54,
       54,   19,   54,   54,   19,   54,   19,   54,   54,   19,
       54,   54,   19,   54,   54,   19,   19,   54,   19,   54,
       54,   19,   54,   54,   54,   54,   54,   54,   54,   54,
       19,   54,   19,   19,   19,   54,   54,   54,   54,   54,

       19,   19,   54,   54,   54,   19,   19,   19,   19,   54,
       54,   19,   54,   54,   19,   54,   54,   19,   19,   54,
       19,   19,   19,   54,   19,   54,   19,   19,   19,   19,
       19,   19,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   34,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,    1,   82,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[339] =
    {   0,
        0,    0,    0,    0,   77,   79,   83,   84,  172,  168,
      169,  688,   90,  688,  688,  688,  688,  688,  688,  688,
      688,  688,   80,   78,  111,   84,   88,  104,  688,  101,
      688,   97,  688,   73,    0,   82,   83,   72,  107,  123,
       95,   61,  130,   65,   84,  113,  138,   87,  137,  126,
      126,  688,  688,  688,  688,  688,  688,  688,  192,  688,
      136,  688,  688,  200,  688,  688,  175,  688,  688,  164,
      168,  688,  194,  199,  203,  688,  688,  688,    0,  159,
      190,  166,  149,  159,  180,  190,  189,  199,  189,  215,
        0,  191,  219,  195,  201,  217,  210,    0,  210,  238,

      217,  244,  214,  232,  249,  258,  244,  260,  284,  260,
      261,  248,  259,  275,  264,  271,  278,  267,  688,  688,
      688,  688,  688,  688,  688,  280,  314,  272,  290,    0,
      275,  300,  295,  314,  301,  299,  317,  305,  305,  322,
      324,    0,  311,  329,  330,  318,  318,  326,  329,  337,
      329,  345,  342,  353,  341,  350,  344,    0,  358,  340,
      365,  369,  371,  378,  360,  385,  365,  385,  390,  379,
      391,  386,  394,  391,  393,  400,  394,    0,  389,  393,
      396,  410,  409,  409,  405,  420,  409,  421,  425,  416,
      428,  422,  427,  425,  426,  442,  430,    0,  447,  444,

      437,  453,  442,    0,  449,    0,    0,  450,    0,    0,
      453,  445,  461,  456,  463,  454,  464,  452,  476,  464,
        0,    0,  475,  480,  476,  492,    0,    0,    0,    0,
      486,  483,  498,    0,    0,  484,  499,  494,    0,  491,
      507,  509,  511,  499,  506,    0,  503,  508,  511,  514,
      523,  519,    0,  524,  514,  516,  521,  531,  522,  532,
      521,    0,  522,  542,    0,  539,    0,  539,  550,    0,
      537,  542,    0,  545,  551,    0,    0,  561,    0,  568,
      568,    0,  556,  556,  557,  577,  560,  576,  565,  571,
        0,  577,    0,    0,    0,  569,  576,  571,  579,  574,

        0,    0,  592,  594,  589,    0,    0,    0,    0,  588,
      594,    0,  588,  603,    0,  606,  611,    0,    0,  612,
        0,    0,    0,  602,    0,  607,    0,    0,    0,    0,
        0,    0,  688,  679,  681,  683,  685,  113
    } ;

static const flex_int16_t yy_def[339] =
    {   0,
      333,    1,  334,  334,  335,  335,  336,  336,  337,  337,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,    0,  333,  333,  333,  333,  333
    } ;

static const flex_int16_t yy_nxt[772] =
    {   0,
       12,   13,   13,   14,   15,   16,   12,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       35,   35,   40,   35,   35,   41,   35,   42,   43,   44,
       35,   45,   46,   47,   48,   49,   50,   51,   35,   35,
       52,   12,   53,   54,   12,   34,   35,   36,   37,   38,
       39,   35,   35,   40,   35,   41,   35,   42,   43,   44,
       35,   45,   46,   47,   48,   49,   50,   51,   35,   35,
       55,   56,   57,   59,   60,   59,   60,   63,   63,   64,
       64,   67,   67,   68,   71,   71,   69,   70,   73,  103,

       74,   74,   73,   80,   75,   75,  108,   92,   81,   93,
       82,   90,  109,   85,   79,   83,   84,   86,   78,   94,
       87,   91,   77,   88,  114,   76,   89,  101,   61,  103,
       61,   95,   72,  102,   80,   96,  108,   92,   81,   93,
       82,  110,   90,  109,   85,   83,   84,   86,   97,   94,
       87,   91,   98,   88,  114,  104,   89,  117,  101,   99,
      100,  115,   95,  102,  118,  105,   96,  106,  333,  111,
       66,  107,  110,  125,   66,  116,   67,   67,   97,  112,
      126,  126,  113,   98,   71,   71,  104,  128,  117,   99,
      100,  132,  115,  131,  118,  105,  119,  106,  120,  121,

      111,  107,  133,  125,  119,  116,  120,  121,  134,  112,
      127,  127,  113,   73,  135,   74,   74,   73,  128,   75,
       75,  132,  129,  122,  131,  130,  136,  137,  333,  123,
      138,  122,  133,  141,  144,  124,  146,  123,  145,  134,
      139,  147,  333,  124,  140,  135,  142,  333,  148,  149,
      333,  153,  333,  129,  122,  130,  136,  156,  137,  123,
      138,  143,  122,  141,  144,  124,  146,  123,  145,  150,
      154,  139,  147,  124,  157,  140,  158,  142,  148,  149,
      151,  153,  155,  152,  159,  333,  161,  156,  162,  170,
      333,  143,  171,  160,  333,  168,  126,  126,  172,  169,

      150,  154,  173,  176,  157,  175,  177,  158,  178,  179,
      151,  163,  155,  152,  180,  159,  161,  181,  174,  162,
      170,  164,  171,  160,  165,  168,  166,  167,  172,  169,
      127,  127,  182,  173,  176,  175,  183,  177,  178,  179,
      184,  187,  163,  185,  186,  180,  188,  181,  174,  189,
      190,  164,  191,  193,  165,  192,  166,  167,  195,  333,
      196,  197,  198,  182,  200,  201,  183,  194,  202,  203,
      204,  184,  187,  185,  186,  199,  188,  205,  207,  189,
      206,  190,  208,  191,  193,  192,  209,  333,  210,  195,
      196,  197,  198,  211,  200,  212,  201,  194,  202,  213,

      203,  204,  214,  333,  215,  199,  218,  161,  205,  207,
      206,  216,  208,  219,  220,  333,  221,  209,  210,  222,
      333,  223,  224,  225,  211,  226,  212,  227,  333,  217,
      213,  228,  229,  214,  215,  230,  218,  161,  181,  231,
      232,  233,  216,  234,  219,  220,  221,  235,  236,  238,
      222,  223,  237,  224,  225,  239,  226,  240,  227,  217,
      241,  228,  229,  242,  243,  230,  244,  245,  181,  231,
      246,  232,  233,  234,  247,  248,  249,  235,  250,  236,
      238,  251,  237,  252,  253,  254,  239,  240,  255,  256,
      257,  241,  258,  242,  243,  259,  244,  245,  260,  261,

      262,  246,  263,  265,  247,  264,  248,  249,  250,  266,
      333,  267,  251,  252,  253,  254,  268,  269,  255,  256,
      270,  257,  258,  271,  333,  272,  259,  273,  260,  261,
      262,  274,  275,  263,  265,  264,  276,  277,  278,  283,
      266,  267,  279,  280,  281,  282,  284,  268,  269,  285,
      270,  286,  287,  290,  271,  272,  288,  289,  273,  291,
      293,  274,  275,  292,  294,  295,  296,  276,  277,  278,
      283,  297,  279,  280,  281,  282,  298,  284,  299,  303,
      285,  300,  286,  287,  290,  301,  288,  289,  302,  304,
      291,  293,  305,  292,  294,  295,  306,  296,  307,  308,

      309,  310,  297,  311,  312,  315,  298,  313,  314,  299,
      303,  300,  316,  317,  318,  301,  319,  320,  302,  321,
      304,  322,  325,  305,  323,  324,  326,  306,  307,  308,
      309,  327,  310,  311,  328,  312,  315,  313,  314,  329,
      330,  333,  316,  317,  318,  331,  319,  320,  332,  333,
      321,  333,  322,  325,  323,  324,  326,  333,  333,  333,
      333,  333,  327,  333,  333,  328,  333,  333,  333,  333,
      329,  330,  333,  333,  333,  331,  333,  333,  332,   12,
       12,   58,   58,   62,   62,   65,   65,   11,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333
    } ;

static const flex_int16_t yy_chk[772] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    6,    6,    7,    8,    7,
        8,   13,   13,   23,   24,   24,   23,   23,   26,   42,

       26,   26,   27,   34,   27,   27,   44,   38,   34,   38,
       34,   37,   45,   36,  338,   34,   34,   36,   32,   38,
       36,   37,   30,   36,   48,   28,   36,   41,    5,   42,
        6,   39,   25,   41,   34,   39,   44,   38,   34,   38,
       34,   46,   37,   45,   36,   34,   34,   36,   39,   38,
       36,   37,   40,   36,   48,   43,   36,   50,   41,   40,
       40,   49,   39,   41,   51,   43,   39,   43,   11,   47,
       10,   43,   46,   61,    9,   49,   67,   67,   39,   47,
       70,   70,   47,   40,   71,   71,   43,   80,   50,   40,
       40,   83,   49,   82,   51,   43,   59,   43,   59,   59,

       47,   43,   84,   61,   64,   49,   64,   64,   85,   47,
       73,   73,   47,   74,   86,   74,   74,   75,   80,   75,
       75,   83,   81,   59,   82,   81,   87,   88,    0,   59,
       89,   64,   84,   92,   94,   59,   95,   64,   94,   85,
       90,   96,    0,   64,   90,   86,   93,    0,   97,   99,
        0,  101,    0,   81,   59,   81,   87,  103,   88,   59,
       89,   93,   64,   92,   94,   59,   95,   64,   94,  100,
      102,   90,   96,   64,  104,   90,  105,   93,   97,   99,
      100,  101,  102,  100,  106,    0,  107,  103,  108,  111,
        0,   93,  112,  106,    0,  110,  126,  126,  113,  110,

      100,  102,  114,  116,  104,  115,  117,  105,  118,  128,
      100,  109,  102,  100,  129,  106,  107,  131,  114,  108,
      111,  109,  112,  106,  109,  110,  109,  109,  113,  110,
      127,  127,  132,  114,  116,  115,  133,  117,  118,  128,
      134,  137,  109,  135,  136,  129,  138,  131,  114,  139,
      140,  109,  141,  144,  109,  143,  109,  109,  145,    0,
      146,  147,  148,  132,  149,  150,  133,  144,  151,  152,
      153,  134,  137,  135,  136,  148,  138,  154,  156,  139,
      155,  140,  157,  141,  144,  143,  159,    0,  160,  145,
      146,  147,  148,  161,  149,  162,  150,  144,  151,  163,

      152,  153,  164,    0,  165,  148,  167,  161,  154,  156,
      155,  166,  157,  168,  169,    0,  170,  159,  160,  171,
        0,  172,  173,  174,  161,  175,  162,  176,    0,  166,
      163,  177,  179,  164,  165,  180,  167,  161,  181,  181,
      182,  183,  166,  184,  168,  169,  170,  185,  186,  188,
      171,  172,  187,  173,  174,  189,  175,  190,  176,  166,
      191,  177,  179,  192,  193,  180,  194,  195,  181,  181,
      196,  182,  183,  184,  197,  199,  200,  185,  201,  186,
      188,  202,  187,  203,  205,  208,  189,  190,  211,  212,
      213,  191,  214,  192,  193,  215,  194,  195,  216,  217,

      218,  196,  219,  223,  197,  220,  199,  200,  201,  224,
        0,  225,  202,  203,  205,  208,  226,  231,  211,  212,
      232,  213,  214,  233,    0,  236,  215,  237,  216,  217,
      218,  238,  240,  219,  223,  220,  241,  242,  243,  249,
      224,  225,  244,  245,  247,  248,  250,  226,  231,  251,
      232,  252,  254,  257,  233,  236,  255,  256,  237,  258,
      260,  238,  240,  259,  261,  263,  264,  241,  242,  243,
      249,  266,  244,  245,  247,  248,  268,  250,  269,  275,
      251,  271,  252,  254,  257,  272,  255,  256,  274,  278,
      258,  260,  280,  259,  261,  263,  281,  264,  283,  284,

      285,  286,  266,  287,  288,  292,  268,  289,  290,  269,
      275,  271,  296,  297,  298,  272,  299,  300,  274,  303,
      278,  304,  311,  280,  305,  310,  313,  281,  283,  284,
      285,  314,  286,  287,  316,  288,  292,  289,  290,  317,
      320,    0,  296,  297,  298,  324,  299,  300,  326,    0,
      303,    0,  304,  311,  305,  310,  313,    0,    0,    0,
        0,    0,  314,    0,    0,  316,    0,    0,    0,    0,
      317,  320,    0,    0,    0,  324,    0,    0,  326,  334,
      334,  335,  335,  336,  336,  337,  337,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[57] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "eiffel.flex"
#line 2 "eiffel.flex"
	#include <math.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <conio.h>
	#include <locale.h> 

#line 0 "eiffel.flex.c"




#line 0 "eiffel.flex.c"



#define INITIAL 0
#define SPECIAL_CHAR 1
#define SINGLE_QUOTED_CHAR 2
#define DOUBLE_QUOTED_STRING 3
#define SINGLE_LINE_COMMENT 4




    
/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif




static int yy_init_globals ( void );


/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( void );



int yyget_debug ( void );



void yyset_debug ( int debug_flag  );



YY_EXTRA_TYPE yyget_extra ( void );



void yyset_extra ( YY_EXTRA_TYPE user_defined  );



FILE *yyget_in ( void );



void yyset_in  ( FILE * _in_str  );



FILE *yyget_out ( void );



void yyset_out  ( FILE * _out_str  );



			int yyget_leng ( void );



char *yyget_text ( void );



int yyget_lineno ( void );



void yyset_lineno ( int _line_number  );







/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1









extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


