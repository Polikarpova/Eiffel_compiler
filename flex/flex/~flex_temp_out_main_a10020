#line 0 "M4_YY_OUTFILE_NAME"
m4_changequote
m4_changequote([[, ]])
m4_define( [[M4_YY_WIN_COMPAT]], [[[[]]]])m4_dnl
m4_define( [[M4_YY_NEVER_INTERACTIVE]], [[[[]]]])m4_dnl
m4_define( [[M4_YY_USE_LINENO]], [[[[]]]])m4_dnl
m4_define( [[M4_YY_TABLES_VERIFY]], [[[[0]]]])m4_dnl
m4_define( [[M4_YY_PREFIX]], [[[[yy]]]])m4_dnl
m4_define( [[M4_YY_USE_LINENO]], [[[[]]]])m4_dnl
m4_define( [[M4_YY_SC_DEFS]], [[[[#define INITIAL 0
#define SPECIAL_CHAR 1
#define SINGLE_QUOTED_CHAR 2
#define DOUBLE_QUOTED_STRING 3
#define SINGLE_LINE_COMMENT 4
]]]])m4_dnl
#line 0 "M4_YY_OUTFILE_NAME"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */



m4_changecom
m4_changequote
m4_changequote([[, ]])


m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
m4_ifelse(M4_YY_PREFIX,yy,,
#define yy_create_buffer M4_YY_PREFIX[[_create_buffer]]
#define yy_delete_buffer M4_YY_PREFIX[[_delete_buffer]]
#define yy_scan_buffer M4_YY_PREFIX[[_scan_buffer]]
#define yy_scan_string M4_YY_PREFIX[[_scan_string]]
#define yy_scan_bytes M4_YY_PREFIX[[_scan_bytes]]
#define yy_init_buffer M4_YY_PREFIX[[_init_buffer]]
#define yy_flush_buffer M4_YY_PREFIX[[_flush_buffer]]
#define yy_load_buffer_state M4_YY_PREFIX[[_load_buffer_state]]
#define yy_switch_to_buffer M4_YY_PREFIX[[_switch_to_buffer]]
#define yypush_buffer_state M4_YY_PREFIX[[push_buffer_state]]
#define yypop_buffer_state M4_YY_PREFIX[[pop_buffer_state]]
#define yyensure_buffer_stack M4_YY_PREFIX[[ensure_buffer_stack]]
#define yy_flex_debug M4_YY_PREFIX[[_flex_debug]]
#define yyin M4_YY_PREFIX[[in]]
#define yyleng M4_YY_PREFIX[[leng]]
#define yylex M4_YY_PREFIX[[lex]]
#define yylineno M4_YY_PREFIX[[lineno]]
#define yyout M4_YY_PREFIX[[out]]
#define yyrestart M4_YY_PREFIX[[restart]]
#define yytext M4_YY_PREFIX[[text]]
#define yywrap M4_YY_PREFIX[[wrap]]
#define yyalloc M4_YY_PREFIX[[alloc]]
#define yyrealloc M4_YY_PREFIX[[realloc]]
#define yyfree M4_YY_PREFIX[[free]]
)
]])

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

m4_ifdef( [[M4_YY_IN_HEADER]], , [[m4_define([[M4_YY_NOT_IN_HEADER]], [[]])]])
m4_ifdef( [[M4_YY_REENTRANT]], , [[m4_define([[M4_YY_NOT_REENTRANT]], [[]])]])

m4_ifdef( [[M4_YY_STACK_USED]], [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_REENTRANT]],  [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])



m4_ifdef( [[M4_YY_PREFIX]],, [[m4_define([[M4_YY_PREFIX]], [[yy]])]])




m4_ifelse(M4_YY_PREFIX,yy,,
    
[[#ifdef yy_create_buffer
#define ]]M4_YY_PREFIX[[_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ]]M4_YY_PREFIX[[_create_buffer
#endif]]

    
[[#ifdef yy_delete_buffer
#define ]]M4_YY_PREFIX[[_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ]]M4_YY_PREFIX[[_delete_buffer
#endif]]

    
[[#ifdef yy_scan_buffer
#define ]]M4_YY_PREFIX[[_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ]]M4_YY_PREFIX[[_scan_buffer
#endif]]

    
[[#ifdef yy_scan_string
#define ]]M4_YY_PREFIX[[_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ]]M4_YY_PREFIX[[_scan_string
#endif]]

    
[[#ifdef yy_scan_bytes
#define ]]M4_YY_PREFIX[[_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ]]M4_YY_PREFIX[[_scan_bytes
#endif]]

    
[[#ifdef yy_init_buffer
#define ]]M4_YY_PREFIX[[_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ]]M4_YY_PREFIX[[_init_buffer
#endif]]

    
[[#ifdef yy_flush_buffer
#define ]]M4_YY_PREFIX[[_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ]]M4_YY_PREFIX[[_flush_buffer
#endif]]

    
[[#ifdef yy_load_buffer_state
#define ]]M4_YY_PREFIX[[_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ]]M4_YY_PREFIX[[_load_buffer_state
#endif]]

    
[[#ifdef yy_switch_to_buffer
#define ]]M4_YY_PREFIX[[_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ]]M4_YY_PREFIX[[_switch_to_buffer
#endif]]

    
[[#ifdef yypush_buffer_state
#define ]]M4_YY_PREFIX[[push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state ]]M4_YY_PREFIX[[push_buffer_state
#endif]]

    
[[#ifdef yypop_buffer_state
#define ]]M4_YY_PREFIX[[pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state ]]M4_YY_PREFIX[[pop_buffer_state
#endif]]

    
[[#ifdef yyensure_buffer_stack
#define ]]M4_YY_PREFIX[[ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack ]]M4_YY_PREFIX[[ensure_buffer_stack
#endif]]

    
[[#ifdef yylex
#define ]]M4_YY_PREFIX[[lex_ALREADY_DEFINED
#else
#define yylex ]]M4_YY_PREFIX[[lex
#endif]]

    
[[#ifdef yyrestart
#define ]]M4_YY_PREFIX[[restart_ALREADY_DEFINED
#else
#define yyrestart ]]M4_YY_PREFIX[[restart
#endif]]

    
[[#ifdef yylex_init
#define ]]M4_YY_PREFIX[[lex_init_ALREADY_DEFINED
#else
#define yylex_init ]]M4_YY_PREFIX[[lex_init
#endif]]

    
[[#ifdef yylex_init_extra
#define ]]M4_YY_PREFIX[[lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ]]M4_YY_PREFIX[[lex_init_extra
#endif]]

    
[[#ifdef yylex_destroy
#define ]]M4_YY_PREFIX[[lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ]]M4_YY_PREFIX[[lex_destroy
#endif]]

    
[[#ifdef yyget_debug
#define ]]M4_YY_PREFIX[[get_debug_ALREADY_DEFINED
#else
#define yyget_debug ]]M4_YY_PREFIX[[get_debug
#endif]]

    
[[#ifdef yyset_debug
#define ]]M4_YY_PREFIX[[set_debug_ALREADY_DEFINED
#else
#define yyset_debug ]]M4_YY_PREFIX[[set_debug
#endif]]

    
[[#ifdef yyget_extra
#define ]]M4_YY_PREFIX[[get_extra_ALREADY_DEFINED
#else
#define yyget_extra ]]M4_YY_PREFIX[[get_extra
#endif]]

    
[[#ifdef yyset_extra
#define ]]M4_YY_PREFIX[[set_extra_ALREADY_DEFINED
#else
#define yyset_extra ]]M4_YY_PREFIX[[set_extra
#endif]]

    
[[#ifdef yyget_in
#define ]]M4_YY_PREFIX[[get_in_ALREADY_DEFINED
#else
#define yyget_in ]]M4_YY_PREFIX[[get_in
#endif]]

    
[[#ifdef yyset_in
#define ]]M4_YY_PREFIX[[set_in_ALREADY_DEFINED
#else
#define yyset_in ]]M4_YY_PREFIX[[set_in
#endif]]

    
[[#ifdef yyget_out
#define ]]M4_YY_PREFIX[[get_out_ALREADY_DEFINED
#else
#define yyget_out ]]M4_YY_PREFIX[[get_out
#endif]]

    
[[#ifdef yyset_out
#define ]]M4_YY_PREFIX[[set_out_ALREADY_DEFINED
#else
#define yyset_out ]]M4_YY_PREFIX[[set_out
#endif]]

    
[[#ifdef yyget_leng
#define ]]M4_YY_PREFIX[[get_leng_ALREADY_DEFINED
#else
#define yyget_leng ]]M4_YY_PREFIX[[get_leng
#endif]]

    
[[#ifdef yyget_text
#define ]]M4_YY_PREFIX[[get_text_ALREADY_DEFINED
#else
#define yyget_text ]]M4_YY_PREFIX[[get_text
#endif]]

    
[[#ifdef yyget_lineno
#define ]]M4_YY_PREFIX[[get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno ]]M4_YY_PREFIX[[get_lineno
#endif]]

    
[[#ifdef yyset_lineno
#define ]]M4_YY_PREFIX[[set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno ]]M4_YY_PREFIX[[set_lineno
#endif]]

    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        
[[#ifdef yyget_column
#define ]]M4_YY_PREFIX[[get_column_ALREADY_DEFINED
#else
#define yyget_column ]]M4_YY_PREFIX[[get_column
#endif]]

        
[[#ifdef yyset_column
#define ]]M4_YY_PREFIX[[set_column_ALREADY_DEFINED
#else
#define yyset_column ]]M4_YY_PREFIX[[set_column
#endif]]

    ]])
    
[[#ifdef yywrap
#define ]]M4_YY_PREFIX[[wrap_ALREADY_DEFINED
#else
#define yywrap ]]M4_YY_PREFIX[[wrap
#endif]]

)

m4_ifdef( [[M4_YY_BISON_LVAL]],
[[
    
[[#ifdef yyget_lval
#define ]]M4_YY_PREFIX[[get_lval_ALREADY_DEFINED
#else
#define yyget_lval ]]M4_YY_PREFIX[[get_lval
#endif]]

    
[[#ifdef yyset_lval
#define ]]M4_YY_PREFIX[[set_lval_ALREADY_DEFINED
#else
#define yyset_lval ]]M4_YY_PREFIX[[set_lval
#endif]]

]])

m4_ifdef( [[<M4_YY_BISON_LLOC>]],
[[
    
[[#ifdef yyget_lloc
#define ]]M4_YY_PREFIX[[get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc ]]M4_YY_PREFIX[[get_lloc
#endif]]

    
[[#ifdef yyset_lloc
#define ]]M4_YY_PREFIX[[set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc ]]M4_YY_PREFIX[[set_lloc
#endif]]

]])


m4_ifelse(M4_YY_PREFIX,yy,,
    
[[#ifdef yyalloc
#define ]]M4_YY_PREFIX[[alloc_ALREADY_DEFINED
#else
#define yyalloc ]]M4_YY_PREFIX[[alloc
#endif]]

    
[[#ifdef yyrealloc
#define ]]M4_YY_PREFIX[[realloc_ALREADY_DEFINED
#else
#define yyrealloc ]]M4_YY_PREFIX[[realloc
#endif]]

    
[[#ifdef yyfree
#define ]]M4_YY_PREFIX[[free_ALREADY_DEFINED
#else
#define yyfree ]]M4_YY_PREFIX[[free
#endif]]

)

m4_ifelse(M4_YY_PREFIX,yy,,
m4_ifdef( [[M4_YY_NOT_REENTRANT]],
[[
    
[[#ifdef yytext
#define ]]M4_YY_PREFIX[[text_ALREADY_DEFINED
#else
#define yytext ]]M4_YY_PREFIX[[text
#endif]]

    
[[#ifdef yyleng
#define ]]M4_YY_PREFIX[[leng_ALREADY_DEFINED
#else
#define yyleng ]]M4_YY_PREFIX[[leng
#endif]]

    
[[#ifdef yyin
#define ]]M4_YY_PREFIX[[in_ALREADY_DEFINED
#else
#define yyin ]]M4_YY_PREFIX[[in
#endif]]

    
[[#ifdef yyout
#define ]]M4_YY_PREFIX[[out_ALREADY_DEFINED
#else
#define yyout ]]M4_YY_PREFIX[[out
#endif]]

    
[[#ifdef yy_flex_debug
#define ]]M4_YY_PREFIX[[_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug ]]M4_YY_PREFIX[[_flex_debug
#endif]]

    
[[#ifdef yylineno
#define ]]M4_YY_PREFIX[[lineno_ALREADY_DEFINED
#else
#define yylineno ]]M4_YY_PREFIX[[lineno
#endif]]

]])
)


m4_ifdef( [[M4_YY_TABLES_EXTERNAL]],
[[
    
[[#ifdef yytables_fload
#define ]]M4_YY_PREFIX[[tables_fload_ALREADY_DEFINED
#else
#define yytables_fload ]]M4_YY_PREFIX[[tables_fload
#endif]]

    
[[#ifdef yytables_destroy
#define ]]M4_YY_PREFIX[[tables_destroy_ALREADY_DEFINED
#else
#define yytables_destroy ]]M4_YY_PREFIX[[tables_destroy
#endif]]

    
[[#ifdef yyTABLES_NAME
#define ]]M4_YY_PREFIX[[TABLES_NAME_ALREADY_DEFINED
#else
#define yyTABLES_NAME ]]M4_YY_PREFIX[[TABLES_NAME
#endif]]

]])

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
/* Returned upon end-of-file. */
#define YY_NULL 0
]])

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
]])







m4_define( [[M4_YY_INCR_LINENO]],
[[
    yylineno++;
]])

m4_define( [[M4_YY_DECL_GUTS_VAR]], [[m4_dnl]])
m4_define( [[M4_YY_NOOP_GUTS_VAR]], [[m4_dnl]])
m4_define( [[YY_G]], [[($1)]])
m4_define( [[M4_YY_PROTO_LAST_ARG]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[void]])
m4_define( [[M4_YY_DEF_LAST_ARG]])

m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[void]])
m4_define([[M4_YY_DECL_LAST_ARG]])
m4_define([[M4_YY_CALL_LAST_ARG]])
m4_define([[M4_YY_CALL_ONLY_ARG]])
m4_define( [[M4_YY_DOC_PARAM]], )



m4_define( [[YYFARGS1]], [[($1 $2 M4_YY_DEF_LAST_ARG)]])
m4_define( [[YYFARGS2]], [[($1 $2, $3 $4 M4_YY_DEF_LAST_ARG)]])
m4_define( [[YYFARGS3]], [[($1 $2, $3 $4, $5 $6 M4_YY_DEF_LAST_ARG)]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN YY_G(yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((YY_G(yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin M4_YY_CALL_LAST_ARG )
#define YY_END_OF_BUFFER_CHAR 0
]])

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
]])


#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    m4_ifdef( [[M4_YY_USE_LINENO]],
    [[
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    ]],
    [[
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    ]])
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = YY_G(yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		YY_G(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, YY_G(yytext_ptr) M4_YY_CALL_LAST_ARG )
]])

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
]])
	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( YY_G(yy_buffer_stack) \
                          ? YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)]
]])


m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
]])

void yyrestart ( FILE *input_file M4_YY_PROTO_LAST_ARG );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size M4_YY_PROTO_LAST_ARG );
void yy_delete_buffer ( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
void yy_flush_buffer ( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
void yypop_buffer_state ( M4_YY_PROTO_ONLY_ARG );

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
static void yyensure_buffer_stack ( M4_YY_PROTO_ONLY_ARG );
static void yy_load_buffer_state ( M4_YY_PROTO_ONLY_ARG );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file M4_YY_PROTO_LAST_ARG );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG)
]])

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len M4_YY_PROTO_LAST_ARG );


void *yyalloc ( yy_size_t M4_YY_PROTO_LAST_ARG );
void *yyrealloc ( void *, yy_size_t M4_YY_PROTO_LAST_ARG );
void yyfree ( void * M4_YY_PROTO_LAST_ARG );

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
]])

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
typedef flex_uint8_t YY_CHAR;
]])
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
FILE *yyin = NULL, *yyout = NULL;
]])
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
typedef int yy_state_type;
]])
extern int yylineno;
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
int yylineno = 1;
]])
extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
]])


m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
static yy_state_type yy_get_previous_state ( M4_YY_PROTO_ONLY_ARG );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  M4_YY_PROTO_LAST_ARG);
static int yy_get_next_buffer ( M4_YY_PROTO_ONLY_ARG );
static void yynoreturn yy_fatal_error ( const char* msg M4_YY_PROTO_LAST_ARG );
]])


m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	YY_G(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	YY_G(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	YY_G(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[112] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       60,   59,   49,    7,   50,    1,   39,   40,   24,   22,
       47,   23,   46,   25,   55,   55,   45,   38,   26,   20,
       28,   48,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   43,   44,   30,   41,   42,    3,    5,    5,    6,
        5,    8,    9,   59,   17,   18,   16,   55,   55,   56,
       21,   56,    0,   55,   19,   27,   29,   57,   57,   57,
       57,   57,   33,   57,   57,   57,   14,   10,   13,   15,
       11,   12,    2,   55,   56,   31,   57,   57,   34,   57,
       57,   57,   32,   57,   57,   57,   57,   52,   53,   57,

       52,   57,   57,   57,   57,   57,   57,   37,   36,   35,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    1,    5,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   25,   26,   27,   28,
       25,   29,   30,   25,   25,   31,   32,   33,   34,   35,
       25,   36,   37,   38,   39,   40,   25,   41,   25,   25,
       42,   43,   44,   45,   46,    1,   47,   25,   25,   48,

       49,   50,   25,   51,   52,   25,   25,   53,   54,   55,
       56,   57,   25,   58,   59,   60,   61,   62,   25,   63,
       25,   25,   64,    1,   65,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1
    } ;

static const flex_int16_t yy_base[117] =
    {   0,
        0,    0,    0,    0,   61,   63,   67,   68,  188,  185,
      186,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,   62,   60,  119,   66,   70,   88,  216,   86,  216,
       84,  216,   48,    0,   61,   56,   55,   54,   55,   58,
       59,  216,  216,  216,  216,  216,  216,  216,   90,  216,
       62,  216,  216,  114,  216,  216,  216,  216,   82,   84,
      216,  108,  113,  117,  216,  216,  216,    0,   90,   91,
       91,   94,   98,   97,  107,  103,  216,  216,  216,  216,
      216,  216,  216,  139,  146,  105,  109,  118,    0,  133,
      124,  127,    0,  129,  145,  146,  146,    0,    0,  149,

        0,  152,  143,  154,  146,  157,  152,    0,    0,    0,
      216,  207,  209,  211,  213,  100
    } ;

static const flex_int16_t yy_def[117] =
    {   0,
      111,    1,  112,  112,  113,  113,  114,  114,  115,  115,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
        0,  111,  111,  111,  111,  111
    } ;

static const flex_int16_t yy_nxt[283] =
    {   0,
       12,   12,   13,   14,   15,   12,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   34,   34,   35,   34,   36,
       34,   34,   37,   38,   34,   34,   34,   39,   34,   40,
       41,   42,   12,   43,   44,   12,   33,   34,   34,   35,
       34,   36,   34,   34,   37,   38,   34,   34,   34,   39,
       34,   40,   41,   45,   46,   47,   49,   50,   49,   50,
       53,   53,   54,   54,   57,   60,   60,   58,   59,   62,
       69,   63,   63,   62,   70,   64,   64,   71,   72,   73,
       74,   75,   76,   77,   83,   78,   79,   84,   84,   60,

       60,   68,   69,   51,   67,   51,   66,   70,   65,   71,
       72,   73,   74,   75,   76,   86,   83,   77,   80,   78,
       79,   87,   81,   85,   85,   88,   62,   82,   63,   63,
       62,   89,   64,   64,   90,   91,   92,   86,   93,   61,
       80,   94,   80,   87,   81,   95,   81,   88,   96,   82,
       98,   82,   99,   89,   84,   84,   90,   91,   92,   97,
       93,   85,   85,   94,   80,   94,  100,   95,   81,   90,
       96,  101,   98,   82,   99,  102,  103,  104,  105,  106,
      107,   97,  108,  109,  110,  111,   56,   94,  100,   56,
      111,   90,  111,  101,  111,  111,  111,  102,  103,  104,

      105,  106,  107,  111,  108,  109,  110,   12,   12,   48,
       48,   52,   52,   55,   55,   11,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111
    } ;

static const flex_int16_t yy_chk[283] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    6,
        7,    8,    7,    8,   22,   23,   23,   22,   22,   25,
       33,   25,   25,   26,   35,   26,   26,   36,   37,   38,
       39,   40,   41,   49,   51,   49,   49,   59,   59,   60,

       60,  116,   33,    5,   31,    6,   29,   35,   27,   36,
       37,   38,   39,   40,   41,   69,   51,   54,   49,   54,
       54,   70,   49,   62,   62,   71,   63,   49,   63,   63,
       64,   72,   64,   64,   73,   74,   75,   69,   76,   24,
       49,   86,   54,   70,   49,   87,   54,   71,   88,   49,
       91,   54,   92,   72,   84,   84,   73,   74,   75,   90,
       76,   85,   85,   86,   54,   94,   94,   87,   54,   90,
       88,   95,   91,   54,   92,   96,   97,  100,  102,  103,
      104,   90,  105,  106,  107,   11,   10,   94,   94,    9,
        0,   90,    0,   95,    0,    0,    0,   96,   97,  100,

      102,  103,  104,    0,  105,  106,  107,  112,  112,  113,
      113,  114,  114,  115,  115,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111
    } ;

m4_ifdef( [[M4_YY_USE_LINENO]],[[
/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[60] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };
]])
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "eiffel.flex"
#line 2 "eiffel.flex"
[[	#include <math.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <conio.h>
	#include <locale.h> 

]]#line 0 "M4_YY_OUTFILE_NAME"




#line 0 "M4_YY_OUTFILE_NAME"
]])

m4_ifdef( [[M4_YY_IN_HEADER]], [[#ifdef YY_HEADER_EXPORT_START_CONDITIONS]])
M4_YY_SC_DEFS
m4_ifdef( [[M4_YY_IN_HEADER]], [[#endif]])

m4_ifdef( [[M4_YY_NO_UNISTD_H]],,
[[
    m4_ifdef( [[M4_YY_WIN_COMPAT]],
    [[
/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    ]],
    [[
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    ]])
]])

m4_ifdef( [[M4_EXTRA_TYPE_DEFS]],
[[
#define YY_EXTRA_TYPE M4_EXTRA_TYPE_DEFS
]],
[[
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif
]]
)

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
static int yy_init_globals ( M4_YY_PROTO_ONLY_ARG );
]])

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

m4_ifdef( [[M4_YY_NO_DESTROY]],,
[[
int yylex_destroy ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_DEBUG]],,
[[
int yyget_debug ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_SET_DEBUG]],,
[[
void yyset_debug ( int debug_flag M4_YY_PROTO_LAST_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_EXTRA]],,
[[
YY_EXTRA_TYPE yyget_extra ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_SET_EXTRA]],,
[[
void yyset_extra ( YY_EXTRA_TYPE user_defined M4_YY_PROTO_LAST_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_IN]],,
[[
FILE *yyget_in ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_SET_IN]],,
[[
void yyset_in  ( FILE * _in_str M4_YY_PROTO_LAST_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_OUT]],,
[[
FILE *yyget_out ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_SET_OUT]],,
[[
void yyset_out  ( FILE * _out_str M4_YY_PROTO_LAST_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_LENG]],,
[[
			int yyget_leng ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_TEXT]],,
[[
char *yyget_text ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_GET_LINENO]],,
[[
int yyget_lineno ( M4_YY_PROTO_ONLY_ARG );
]])

m4_ifdef( [[M4_YY_NO_SET_LINENO]],,
[[
void yyset_lineno ( int _line_number M4_YY_PROTO_LAST_ARG );
]])

m4_ifdef( [[M4_YY_REENTRANT]],
[[
m4_ifdef( [[M4_YY_NO_GET_COLUMN]],,
[[
int yyget_column  ( M4_YY_PROTO_ONLY_ARG );
]])
]])

m4_ifdef( [[M4_YY_REENTRANT]],
[[
m4_ifdef( [[M4_YY_NO_SET_COLUMN]],,
[[
void yyset_column ( int _column_no M4_YY_PROTO_LAST_ARG );
]])
]])


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( M4_YY_PROTO_ONLY_ARG );
#else
extern int yywrap ( M4_YY_PROTO_ONLY_ARG );
#endif
#endif

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
#ifndef YY_NO_UNPUT
    m4_ifdef( [[M4_YY_NO_UNPUT]],,
    [[
    static void yyunput ( int c, char *buf_ptr  M4_YY_PROTO_LAST_ARG);
    ]])
#endif
]])

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int M4_YY_PROTO_LAST_ARG);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * M4_YY_PROTO_LAST_ARG);
#endif

#ifndef YY_NO_INPUT
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
#ifdef __cplusplus
static int yyinput ( M4_YY_PROTO_ONLY_ARG );
#else
static int input ( M4_YY_PROTO_ONLY_ARG );
#endif
]])
#endif


m4_ifdef( [[M4_YY_STACK_USED]],
[[

m4_ifdef( [[M4_YY_NOT_REENTRANT]],
[[
    m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
    [[
        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    ]])
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
    m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
    [[
    static void yy_push_state ( int _new_state M4_YY_PROTO_LAST_ARG);
    ]])
    m4_ifdef( [[M4_YY_NO_POP_STATE]],,
    [[
    static void yy_pop_state ( M4_YY_PROTO_ONLY_ARG );
    ]])
    m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
    [[
    static int yy_top_state ( M4_YY_PROTO_ONLY_ARG );
    ]])
]])

]],
[[
m4_define( [[M4_YY_NO_PUSH_STATE]])
m4_define( [[M4_YY_NO_POP_STATE]])
m4_define( [[M4_YY_NO_TOP_STATE]])
]])

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif
]])

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg M4_YY_CALL_LAST_ARG)
#endif
]])

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
]])
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
/* end tables serialization structures and prototypes */

]])

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1


m4_define( [[M4_YY_LEX_PROTO]], [[(M4_YY_PROTO_ONLY_ARG)]])
m4_define( [[M4_YY_LEX_DECLARATION]], [[(M4_YY_DEF_ONLY_ARG)]])

m4_ifdef( [[M4_YY_BISON_LVAL]],
[[
    m4_dnl  The bison pure parser is used. Redefine yylex to
    m4_dnl  accept the lval parameter.

    m4_define( [[M4_YY_LEX_PROTO]], [[\]]
               [[(YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG)]])
    m4_define( [[M4_YY_LEX_DECLARATION]], [[\]]
               [[YYFARGS1(YYSTYPE *,yylval_param)]])
]])

m4_ifdef( [[<M4_YY_BISON_LLOC>]],
[[
    m4_dnl  Locations are used. yylex should also accept the ylloc parameter.

    m4_define( [[M4_YY_LEX_PROTO]], [[\]]
               [[(YYSTYPE * yylval_param, YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG)]])
    m4_define( [[M4_YY_LEX_DECLARATION]], [[\]]
               [[YYFARGS2(YYSTYPE *,yylval_param, YYLTYPE *,yylloc_param)]])
]])

extern int yylex M4_YY_LEX_PROTO;

#define YY_DECL int yylex M4_YY_LEX_DECLARATION
#endif /* !YY_DECL */

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
#define YY_RULE_SETUP \
	YY_USER_ACTION
]])

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    M4_YY_DECL_GUTS_VAR();

m4_ifdef( [[M4_YY_NOT_REENTRANT]],
[[
    m4_ifdef( [[M4_YY_BISON_LVAL]],
    [[
        YYSTYPE * yylval;
    ]])
    m4_ifdef( [[<M4_YY_BISON_LLOC>]],
    [[
        YYLTYPE * yylloc;
    ]])
]])

m4_ifdef( [[M4_YY_BISON_LVAL]],
[[
    yylval = yylval_param;
]])

m4_ifdef( [[<M4_YY_BISON_LLOC>]],
[[
    yylloc = yylloc_param;
]])

	if ( !YY_G(yy_init) )
		{
		YY_G(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

m4_ifdef( [[M4_YY_USES_REJECT]],
[[
        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! YY_G(yy_state_buf) )
            YY_G(yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  M4_YY_CALL_LAST_ARG);
            if ( ! YY_G(yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
]])

		if ( ! YY_G(yy_start) )
			YY_G(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
		}

		yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
		}

	{
#line 34 "eiffel.flex"



#line 38 "eiffel.flex"
[[	int startLine = 0;
]][[	char literal[1000];
]]

#line 0 "M4_YY_OUTFILE_NAME"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = YY_G(yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = YY_G(yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = YY_G(yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				YY_G(yy_last_accepting_state) = yy_current_state;
				YY_G(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 112 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 111 );
		yy_cp = YY_G(yy_last_accepting_cpos);
		yy_current_state = YY_G(yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

m4_ifdef( [[M4_YY_USE_LINENO]],[[
		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					M4_YY_INCR_LINENO();
			}
]])

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = YY_G(yy_hold_char);
			yy_cp = YY_G(yy_last_accepting_cpos);
			yy_current_state = YY_G(yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 42 "eiffel.flex"
[[{ BEGIN(SINGLE_QUOTED_CHAR); literal[0] = '\0'; startLine = yylineno; }
	YY_BREAK]]
case 2:
YY_RULE_SETUP
#line 43 "eiffel.flex"
[[{ strcat(literal, yytext);}
	YY_BREAK]]
case 3:
YY_RULE_SETUP
#line 44 "eiffel.flex"
[[// <SINGLE_QUOTED_CHAR>\\\\			{ strcat(literal, "\\");}
	YY_BREAK]]
case 4:
YY_RULE_SETUP
#line 45 "eiffel.flex"
[[// <SINGLE_QUOTED_CHAR>\\\'			{ strcat(literal, "\'");}
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 46 "eiffel.flex"
[[{ strcat(literal, yytext);}
	YY_BREAK]]
case 6:
YY_RULE_SETUP
#line 47 "eiffel.flex"
[[{ printf("Found single quoted literal \"%s\". From line %d to line %d\n", literal, startLine, yylineno); BEGIN(INITIAL);}
	YY_BREAK]]
case 7:
YY_RULE_SETUP
#line 49 "eiffel.flex"
[[{ BEGIN(DOUBLE_QUOTED_STRING); literal[0] = '\0'; startLine = yylineno; }
	YY_BREAK]]
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 50 "eiffel.flex"
[[{ strcat(literal, yytext);}
	YY_BREAK]]
case 9:
YY_RULE_SETUP
#line 51 "eiffel.flex"
[[{ printf("Found double quoted literal \"%s\". From line %d to line %d\n", literal, startLine, yylineno); BEGIN(INITIAL);}
	YY_BREAK]]
case 10:
YY_RULE_SETUP
#line 54 "eiffel.flex"
[[{ strcat(literal, "\%");}
	YY_BREAK]]
case 11:
YY_RULE_SETUP
#line 55 "eiffel.flex"
[[{ strcat(literal, "\n");}
	YY_BREAK]]
case 12:
YY_RULE_SETUP
#line 56 "eiffel.flex"
[[{ strcat(literal, "\t");}
	YY_BREAK]]
case 13:
YY_RULE_SETUP
#line 57 "eiffel.flex"
[[{ strcat(literal, "\'");}
	YY_BREAK]]
case 14:
YY_RULE_SETUP
#line 58 "eiffel.flex"
[[{ strcat(literal, "\"");}
	YY_BREAK]]
case 15:
YY_RULE_SETUP
#line 59 "eiffel.flex"
[[{ strcat(literal, "\\");}
	YY_BREAK]]
case 16:
YY_RULE_SETUP
#line 61 "eiffel.flex"
[[{ BEGIN(SINGLE_LINE_COMMENT); }
	YY_BREAK]]
case 17:
YY_RULE_SETUP
#line 62 "eiffel.flex"
[[/* skip */
	YY_BREAK]]
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 63 "eiffel.flex"
[[{ printf("Found a comment\n"); BEGIN(INITIAL);}
	YY_BREAK]]
case 19:
YY_RULE_SETUP
#line 65 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 20:
YY_RULE_SETUP
#line 66 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 21:
YY_RULE_SETUP
#line 67 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 22:
YY_RULE_SETUP
#line 68 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 23:
YY_RULE_SETUP
#line 69 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 24:
YY_RULE_SETUP
#line 70 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 25:
YY_RULE_SETUP
#line 71 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 26:
YY_RULE_SETUP
#line 72 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 27:
YY_RULE_SETUP
#line 73 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 28:
YY_RULE_SETUP
#line 74 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 29:
YY_RULE_SETUP
#line 75 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 30:
YY_RULE_SETUP
#line 76 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 31:
YY_RULE_SETUP
#line 77 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 32:
YY_RULE_SETUP
#line 78 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 33:
YY_RULE_SETUP
#line 79 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 34:
YY_RULE_SETUP
#line 80 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 35:
YY_RULE_SETUP
#line 81 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 36:
YY_RULE_SETUP
#line 82 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 37:
YY_RULE_SETUP
#line 83 "eiffel.flex"
[[{ printf("Found operator \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 38:
YY_RULE_SETUP
#line 85 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 39:
YY_RULE_SETUP
#line 86 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 40:
YY_RULE_SETUP
#line 87 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 41:
YY_RULE_SETUP
#line 88 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 42:
YY_RULE_SETUP
#line 89 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 43:
YY_RULE_SETUP
#line 90 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 44:
YY_RULE_SETUP
#line 91 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 45:
YY_RULE_SETUP
#line 92 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 46:
YY_RULE_SETUP
#line 93 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 47:
YY_RULE_SETUP
#line 94 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 48:
YY_RULE_SETUP
#line 95 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 49:
YY_RULE_SETUP
#line 96 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 50:
YY_RULE_SETUP
#line 97 "eiffel.flex"
[[{ printf("Found symbol \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 51:
YY_RULE_SETUP
#line 99 "eiffel.flex"
[[// {KEYWORD}				{ printf("Found keyword \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 52:
YY_RULE_SETUP
#line 100 "eiffel.flex"
[[{ printf("Found boolean value \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 53:
YY_RULE_SETUP
#line 101 "eiffel.flex"
[[{ printf("Found null-value \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 54:
YY_RULE_SETUP
#line 102 "eiffel.flex"
[[// {NATURAL}				{ printf("Found unsigned int value \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 55:
YY_RULE_SETUP
#line 103 "eiffel.flex"
[[{ printf("Found int value \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 56:
YY_RULE_SETUP
#line 104 "eiffel.flex"
[[{ printf("Found real value \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 57:
YY_RULE_SETUP
#line 105 "eiffel.flex"
[[{ printf("Found identifier \"%s\" in line %d\n", yytext, yylineno); }
	YY_BREAK]]
case 58:
YY_RULE_SETUP
#line 107 "eiffel.flex"
[[// {WHITESPACE}			{ /* skip  {WHITESPACE} */ }
	YY_BREAK]]
case 59:
YY_RULE_SETUP
#line 108 "eiffel.flex"
[[ECHO;
	YY_BREAK]]
#line 0 "M4_YY_OUTFILE_NAME"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SPECIAL_CHAR):
case YY_STATE_EOF(SINGLE_QUOTED_CHAR):
case YY_STATE_EOF(DOUBLE_QUOTED_STRING):
case YY_STATE_EOF(SINGLE_LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - YY_G(yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = YY_G(yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( YY_G(yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state M4_YY_CALL_LAST_ARG);

			yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++YY_G(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = YY_G(yy_last_accepting_cpos);
				yy_current_state = YY_G(yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				YY_G(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				YY_G(yy_c_buf_p) =
					YY_G(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );

				yy_cp = YY_G(yy_c_buf_p);
				yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				YY_G(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)];

				yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );

				yy_cp = YY_G(yy_c_buf_p);
				yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
]])

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = YY_G(yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( YY_G(yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
m4_ifdef( [[M4_YY_USES_REJECT]],
[[
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
]],
[[
			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (YY_G(yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) M4_YY_CALL_LAST_ARG );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			YY_G(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;
]])
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			YY_G(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars);
		}

	if ( YY_G(yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  M4_YY_CALL_LAST_ARG);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((YY_G(yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = YY_G(yy_n_chars) + number_to_move + (YY_G(yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size M4_YY_CALL_LAST_ARG );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	YY_G(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	YY_G(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}
]])

/* yy_get_previous_state - get the state just before the EOB char was reached */

m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
    static yy_state_type yy_get_previous_state (M4_YY_DEF_ONLY_ARG)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    M4_YY_DECL_GUTS_VAR();

	yy_current_state = YY_G(yy_start);

	for ( yy_cp = YY_G(yytext_ptr) + YY_MORE_ADJ; yy_cp < YY_G(yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 66);
		if ( yy_accept[yy_current_state] )
			{
			YY_G(yy_last_accepting_state) = yy_current_state;
			YY_G(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 112 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  YYFARGS1( yy_state_type, yy_current_state)
{
	int yy_is_jam;
    M4_YY_DECL_GUTS_VAR(); /* This var may be unused depending upon options. */
	char *yy_cp = YY_G(yy_c_buf_p);

	YY_CHAR yy_c = 66;
	if ( yy_accept[yy_current_state] )
		{
		YY_G(yy_last_accepting_state) = yy_current_state;
		YY_G(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 112 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 111);

	M4_YY_NOOP_GUTS_VAR();
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
m4_ifdef( [[M4_YY_NO_UNPUT]],,
[[
    static void yyunput YYFARGS2( int,c, char *,yy_bp)
{
	char *yy_cp;
    M4_YY_DECL_GUTS_VAR();

    yy_cp = YY_G(yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = YY_G(yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = YY_G(yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			YY_G(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

m4_ifdef( [[M4_YY_USE_LINENO]],
[[
    if ( c == '\n' ){
        --yylineno;
    }
]])

	YY_G(yytext_ptr) = yy_bp;
	YY_G(yy_hold_char) = *yy_cp;
	YY_G(yy_c_buf_p) = yy_cp;
}
]])
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (M4_YY_DEF_ONLY_ARG)
#else
    static int input  (M4_YY_DEF_ONLY_ARG)
#endif

{
	int c;
    M4_YY_DECL_GUTS_VAR();

	*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);

	if ( *YY_G(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( YY_G(yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
			/* This was really a NUL. */
			*YY_G(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr));
			++YY_G(yy_c_buf_p);

			switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin M4_YY_CALL_LAST_ARG);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
						return 0;

					if ( ! YY_G(yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(M4_YY_CALL_ONLY_ARG);
#else
					return input(M4_YY_CALL_ONLY_ARG);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) YY_G(yy_c_buf_p);	/* cast for 8-bit char's */
	*YY_G(yy_c_buf_p) = '\0';	/* preserve yytext */
	YY_G(yy_hold_char) = *++YY_G(yy_c_buf_p);

	if ( c == '\n' )
		M4_YY_INCR_LINENO();

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * M4_YY_DOC_PARAM
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  YYFARGS1( FILE *,input_file)
{
    M4_YY_DECL_GUTS_VAR();

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file M4_YY_CALL_LAST_ARG);
	yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
}


/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * M4_YY_DOC_PARAM
 */
    void yy_switch_to_buffer  YYFARGS1( YY_BUFFER_STATE ,new_buffer)
{
    M4_YY_DECL_GUTS_VAR();

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = YY_G(yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	YY_G(yy_did_buffer_switch_on_eof) = 1;
}


static void yy_load_buffer_state  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
	YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	YY_G(yytext_ptr) = YY_G(yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	YY_G(yy_hold_char) = *YY_G(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * M4_YY_DOC_PARAM
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  YYFARGS2( FILE *,file, int ,size)
{
	YY_BUFFER_STATE b;
    m4_dnl M4_YY_DECL_GUTS_VAR();

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) M4_YY_CALL_LAST_ARG );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) M4_YY_CALL_LAST_ARG );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file M4_YY_CALL_LAST_ARG);

	return b;
}


/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * M4_YY_DOC_PARAM
 */
    void yy_delete_buffer YYFARGS1( YY_BUFFER_STATE ,b)
{
    M4_YY_DECL_GUTS_VAR();

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf M4_YY_CALL_LAST_ARG );

	yyfree( (void *) b M4_YY_CALL_LAST_ARG );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  YYFARGS2( YY_BUFFER_STATE ,b, FILE *,file)

{
	int oerrno = errno;
    M4_YY_DECL_GUTS_VAR();

	yy_flush_buffer( b M4_YY_CALL_LAST_ARG);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

m4_ifdef( [[M4_YY_ALWAYS_INTERACTIVE]],
[[
	b->yy_is_interactive = 1;
]],
[[
    m4_ifdef( [[M4_YY_NEVER_INTERACTIVE]],
    [[
        b->yy_is_interactive = 0;
    ]],
    [[
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    ]])
]])
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * M4_YY_DOC_PARAM
 */
    void yy_flush_buffer YYFARGS1( YY_BUFFER_STATE ,b)
{
    M4_YY_DECL_GUTS_VAR();
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  M4_YY_DOC_PARAM
 */
void yypush_buffer_state YYFARGS1(YY_BUFFER_STATE,new_buffer)
{
    M4_YY_DECL_GUTS_VAR();
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(M4_YY_CALL_ONLY_ARG);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = YY_G(yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		YY_G(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
	YY_G(yy_did_buffer_switch_on_eof) = 1;
}


/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  M4_YY_DOC_PARAM
 */
void yypop_buffer_state (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (YY_G(yy_buffer_stack_top) > 0)
		--YY_G(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
		YY_G(yy_did_buffer_switch_on_eof) = 1;
	}
}


/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (M4_YY_DEF_ONLY_ARG)
{
	yy_size_t num_to_alloc;
    M4_YY_DECL_GUTS_VAR();

	if (!YY_G(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								M4_YY_CALL_LAST_ARG);
		if ( ! YY_G(yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(YY_G(yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		YY_G(yy_buffer_stack_max) = num_to_alloc;
		YY_G(yy_buffer_stack_top) = 0;
		return;
	}

	if (YY_G(yy_buffer_stack_top) >= (YY_G(yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = YY_G(yy_buffer_stack_max) + grow_size;
		YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								(YY_G(yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								M4_YY_CALL_LAST_ARG);
		if ( ! YY_G(yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(YY_G(yy_buffer_stack) + YY_G(yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		YY_G(yy_buffer_stack_max) = num_to_alloc;
	}
}




m4_ifdef( [[M4_YY_NO_SCAN_BUFFER]],,
[[
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * M4_YY_DOC_PARAM
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  YYFARGS2( char *,base, yy_size_t ,size)
{
	YY_BUFFER_STATE b;
    m4_dnl M4_YY_DECL_GUTS_VAR();

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) M4_YY_CALL_LAST_ARG );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b M4_YY_CALL_LAST_ARG );

	return b;
}
]])


m4_ifdef( [[M4_YY_NO_SCAN_STRING]],,
[[
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * M4_YY_DOC_PARAM
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string YYFARGS1( const char *, yystr)
{
    m4_dnl M4_YY_DECL_GUTS_VAR();

	return yy_scan_bytes( yystr, (int) strlen(yystr) M4_YY_CALL_LAST_ARG);
}
]])


m4_ifdef( [[M4_YY_NO_SCAN_BYTES]],,
[[
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * M4_YY_DOC_PARAM
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  YYFARGS2( const char *,yybytes, int ,_yybytes_len)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    m4_dnl M4_YY_DECL_GUTS_VAR();

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n M4_YY_CALL_LAST_ARG );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n M4_YY_CALL_LAST_ARG);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
]])


m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
[[
    static void yy_push_state YYFARGS1( int ,_new_state)
{
    M4_YY_DECL_GUTS_VAR();
	if ( YY_G(yy_start_stack_ptr) >= YY_G(yy_start_stack_depth) )
		{
		yy_size_t new_size;

		YY_G(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) YY_G(yy_start_stack_depth) * sizeof( int );

		if ( ! YY_G(yy_start_stack) )
			YY_G(yy_start_stack) = (int *) yyalloc( new_size M4_YY_CALL_LAST_ARG );

		else
			YY_G(yy_start_stack) = (int *) yyrealloc(
					(void *) YY_G(yy_start_stack), new_size M4_YY_CALL_LAST_ARG );

		if ( ! YY_G(yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}
]])


m4_ifdef( [[M4_YY_NO_POP_STATE]],,
[[
    static void yy_pop_state  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
	if ( --YY_G(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)]);
}
]])


m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
[[
    static int yy_top_state  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
	return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
}
]])

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error YYFARGS1(const char*, msg)
{
	M4_YY_DECL_GUTS_VAR();
	M4_YY_NOOP_GUTS_VAR();
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = YY_G(yy_hold_char); \
		YY_G(yy_c_buf_p) = yytext + yyless_macro_arg; \
		YY_G(yy_hold_char) = *YY_G(yy_c_buf_p); \
		*YY_G(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */


m4_ifdef( [[M4_YY_NO_GET_LINENO]],,
[[
/** Get the current line number.
 * M4_YY_DOC_PARAM
 */
int yyget_lineno  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();

    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        if (! YY_CURRENT_BUFFER)
            return 0;
    ]])
    return yylineno;
}
]])

m4_ifdef( [[M4_YY_REENTRANT]],
[[
m4_ifdef( [[M4_YY_NO_GET_COLUMN]],,
[[
/** Get the current column number.
 * M4_YY_DOC_PARAM
 */
int yyget_column  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();

    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        if (! YY_CURRENT_BUFFER)
            return 0;
    ]])
    return yycolumn;
}
]])
]])

m4_ifdef( [[M4_YY_NO_GET_IN]],,
[[
/** Get the input stream.
 * M4_YY_DOC_PARAM
 */
FILE *yyget_in  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
    return yyin;
}
]])

m4_ifdef( [[M4_YY_NO_GET_OUT]],,
[[
/** Get the output stream.
 * M4_YY_DOC_PARAM
 */
FILE *yyget_out  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
    return yyout;
}
]])

m4_ifdef( [[M4_YY_NO_GET_LENG]],,
[[
/** Get the length of the current token.
 * M4_YY_DOC_PARAM
 */
int yyget_leng  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
    return yyleng;
}
]])

/** Get the current token.
 * M4_YY_DOC_PARAM
 */
m4_ifdef( [[M4_YY_NO_GET_TEXT]],,
[[
char *yyget_text  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
    return yytext;
}
]])


m4_ifdef( [[M4_YY_NO_SET_LINENO]],,
[[
/** Set the current line number.
 * @param _line_number line number
 * M4_YY_DOC_PARAM
 */
void yyset_lineno YYFARGS1( int ,_line_number)
{
    M4_YY_DECL_GUTS_VAR();

    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    ]])
    yylineno = _line_number;
}
]])

m4_ifdef( [[M4_YY_REENTRANT]],
[[
m4_ifdef( [[M4_YY_NO_SET_COLUMN]],,
[[
/** Set the current column.
 * @param _column_no column number
 * M4_YY_DOC_PARAM
 */
void yyset_column YYFARGS1( int , _column_no)
{
    M4_YY_DECL_GUTS_VAR();

    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    ]])
    yycolumn = _column_no;
}
]])
]])


m4_ifdef( [[M4_YY_NO_SET_IN]],,
[[
/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * M4_YY_DOC_PARAM
 * @see yy_switch_to_buffer
 */
void yyset_in YYFARGS1( FILE * ,_in_str)
{
    M4_YY_DECL_GUTS_VAR();
    yyin = _in_str ;
}
]])

m4_ifdef( [[M4_YY_NO_SET_OUT]],,
[[
void yyset_out YYFARGS1( FILE * ,_out_str)
{
    M4_YY_DECL_GUTS_VAR();
    yyout = _out_str ;
}
]])


m4_ifdef( [[M4_YY_NO_GET_DEBUG]],,
[[
int yyget_debug  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
    return yy_flex_debug;
}
]])

m4_ifdef( [[M4_YY_NO_SET_DEBUG]],,
[[
void yyset_debug YYFARGS1( int ,_bdebug)
{
    M4_YY_DECL_GUTS_VAR();
    yy_flex_debug = _bdebug ;
}
]])


static int yy_init_globals (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

m4_ifdef( [[M4_YY_USE_LINENO]],
[[
    m4_ifdef( [[M4_YY_NOT_REENTRANT]],
    [[
    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    ]])
]])
    YY_G(yy_buffer_stack) = NULL;
    YY_G(yy_buffer_stack_top) = 0;
    YY_G(yy_buffer_stack_max) = 0;
    YY_G(yy_c_buf_p) = NULL;
    YY_G(yy_init) = 0;
    YY_G(yy_start) = 0;

m4_ifdef( [[M4_YY_HAS_START_STACK_VARS]],
[[
    YY_G(yy_start_stack_ptr) = 0;
    YY_G(yy_start_stack_depth) = 0;
    YY_G(yy_start_stack) =  NULL;
]])

m4_ifdef( [[M4_YY_USES_REJECT]],
[[
    YY_G(yy_state_buf) = 0;
    YY_G(yy_state_ptr) = 0;
    YY_G(yy_full_match) = 0;
    YY_G(yy_lp) = 0;
]])

m4_ifdef( [[M4_YY_TEXT_IS_ARRAY]],
[[
    YY_G(yytext_ptr) = 0;
    YY_G(yy_more_offset) = 0;
    YY_G(yy_prev_more_offset) = 0;
]])

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}


/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (M4_YY_DEF_ONLY_ARG)
{
    M4_YY_DECL_GUTS_VAR();

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(M4_YY_CALL_ONLY_ARG);
	}

	/* Destroy the stack itself. */
	yyfree(YY_G(yy_buffer_stack) M4_YY_CALL_LAST_ARG);
	YY_G(yy_buffer_stack) = NULL;

m4_ifdef( [[M4_YY_HAS_START_STACK_VARS]],
[[
    /* Destroy the start condition stack. */
        yyfree( YY_G(yy_start_stack) M4_YY_CALL_LAST_ARG );
        YY_G(yy_start_stack) = NULL;
]])

m4_ifdef( [[M4_YY_USES_REJECT]],
[[
    yyfree ( YY_G(yy_state_buf) M4_YY_CALL_LAST_ARG);
    YY_G(yy_state_buf)  = NULL;
]])

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( M4_YY_CALL_ONLY_ARG);

    return 0;
}


m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
/*
 * Internal utility routines.
 */
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
#ifndef yytext_ptr
static void yy_flex_strncpy YYFARGS3( char*,s1, const char *,s2, int,n)
{
	M4_YY_DECL_GUTS_VAR();
	M4_YY_NOOP_GUTS_VAR();

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif
]])

m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
[[
#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YYFARGS1( const char *,s)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif
]])

m4_ifdef( [[M4_YY_NO_FLEX_ALLOC]],,
[[
void *yyalloc YYFARGS1( yy_size_t ,size)
{
	M4_YY_DECL_GUTS_VAR();
	M4_YY_NOOP_GUTS_VAR();
	return malloc(size);
}
]])

m4_ifdef( [[M4_YY_NO_FLEX_REALLOC]],,
[[
void *yyrealloc  YYFARGS2( void *,ptr, yy_size_t ,size)
{
	M4_YY_DECL_GUTS_VAR();
	M4_YY_NOOP_GUTS_VAR();

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}
]])

m4_ifdef( [[M4_YY_NO_FLEX_FREE]],,
[[
void yyfree YYFARGS1( void *,ptr)
{
	M4_YY_DECL_GUTS_VAR();
	M4_YY_NOOP_GUTS_VAR();
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}
]])

#define YYTABLES_NAME "yytables"


m4_ifdef([[M4_YY_MAIN]], [[
int main (void);

int main ()
{

	yylex();

	return 0;
}
]])

]])
m4_ifdef( [[M4_YY_IN_HEADER]],
[[
#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif

[[#ifndef ]]M4_YY_PREFIX[[_create_buffer_ALREADY_DEFINED
#undef yy_create_buffer
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_delete_buffer_ALREADY_DEFINED
#undef yy_delete_buffer
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_scan_buffer_ALREADY_DEFINED
#undef yy_scan_buffer
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_scan_string_ALREADY_DEFINED
#undef yy_scan_string
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_scan_bytes_ALREADY_DEFINED
#undef yy_scan_bytes
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_init_buffer_ALREADY_DEFINED
#undef yy_init_buffer
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_flush_buffer_ALREADY_DEFINED
#undef yy_flush_buffer
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_load_buffer_state_ALREADY_DEFINED
#undef yy_load_buffer_state
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_switch_to_buffer_ALREADY_DEFINED
#undef yy_switch_to_buffer
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[push_buffer_state_ALREADY_DEFINED
#undef yypush_buffer_state
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[pop_buffer_state_ALREADY_DEFINED
#undef yypop_buffer_state
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[ensure_buffer_stack_ALREADY_DEFINED
#undef yyensure_buffer_stack
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[lex_ALREADY_DEFINED
#undef yylex
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[restart_ALREADY_DEFINED
#undef yyrestart
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[lex_init_ALREADY_DEFINED
#undef yylex_init
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[lex_init_extra_ALREADY_DEFINED
#undef yylex_init_extra
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[lex_destroy_ALREADY_DEFINED
#undef yylex_destroy
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_debug_ALREADY_DEFINED
#undef yyget_debug
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_debug_ALREADY_DEFINED
#undef yyset_debug
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_extra_ALREADY_DEFINED
#undef yyget_extra
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_extra_ALREADY_DEFINED
#undef yyset_extra
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_in_ALREADY_DEFINED
#undef yyget_in
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_in_ALREADY_DEFINED
#undef yyset_in
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_out_ALREADY_DEFINED
#undef yyget_out
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_out_ALREADY_DEFINED
#undef yyset_out
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_leng_ALREADY_DEFINED
#undef yyget_leng
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_text_ALREADY_DEFINED
#undef yyget_text
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_lineno_ALREADY_DEFINED
#undef yyget_lineno
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_lineno_ALREADY_DEFINED
#undef yyset_lineno
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_column_ALREADY_DEFINED
#undef yyget_column
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_column_ALREADY_DEFINED
#undef yyset_column
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[wrap_ALREADY_DEFINED
#undef yywrap
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_lval_ALREADY_DEFINED
#undef yyget_lval
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_lval_ALREADY_DEFINED
#undef yyset_lval
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[get_lloc_ALREADY_DEFINED
#undef yyget_lloc
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[set_lloc_ALREADY_DEFINED
#undef yyset_lloc
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[alloc_ALREADY_DEFINED
#undef yyalloc
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[realloc_ALREADY_DEFINED
#undef yyrealloc
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[free_ALREADY_DEFINED
#undef yyfree
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[text_ALREADY_DEFINED
#undef yytext
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[leng_ALREADY_DEFINED
#undef yyleng
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[in_ALREADY_DEFINED
#undef yyin
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[out_ALREADY_DEFINED
#undef yyout
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[_flex_debug_ALREADY_DEFINED
#undef yy_flex_debug
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[lineno_ALREADY_DEFINED
#undef yylineno
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[tables_fload_ALREADY_DEFINED
#undef yytables_fload
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[tables_destroy_ALREADY_DEFINED
#undef yytables_destroy
#endif]]
[[#ifndef ]]M4_YY_PREFIX[[TABLES_NAME_ALREADY_DEFINED
#undef yyTABLES_NAME
#endif]]
]])
#line 108 "eiffel.flex"
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
[[
]]]])
