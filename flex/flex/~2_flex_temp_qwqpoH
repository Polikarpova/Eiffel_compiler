#line 0 "eiffel.flex.c"


#line 0 "eiffel.flex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */











#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif




























/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))






























/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */


/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */



/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]



/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;


void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );


static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );


void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext






static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[332] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       60,   59,   49,    7,   50,    1,   39,   40,   24,   22,
       47,   23,   46,   25,   55,   55,   45,   38,   26,   20,
       28,   48,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       43,   44,   30,   41,   42,    3,    5,    5,    6,    5,
        8,    9,   59,   17,   18,   16,   55,   55,   56,   21,
       56,    0,   55,   19,   27,   29,   57,   57,   57,   57,
       51,   57,   57,   57,   57,   57,   57,   57,   51,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   57,

       57,   57,   57,   57,   33,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   14,   10,   13,   15,
       11,   12,    2,   55,   56,   57,   57,   51,   31,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   51,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   34,   57,   51,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   32,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   51,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   57,

       57,   51,   57,   51,   51,   57,   51,   51,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   51,   52,
       57,   57,   57,   57,   53,   51,   51,   51,   57,   57,
       57,   51,   51,   57,   57,   57,   51,   57,   57,   57,
       57,   57,   57,   52,   57,   57,   57,   57,   57,   57,
       51,   57,   57,   57,   57,   57,   57,   57,   57,   51,
       57,   57,   51,   57,   51,   57,   57,   51,   57,   57,
       51,   57,   57,   51,   51,   57,   51,   57,   57,   51,
       57,   57,   57,   57,   57,   57,   57,   57,   51,   57,
       51,   51,   51,   57,   57,   57,   57,   57,   51,   51,

       57,   57,   57,   51,   37,   51,   51,   57,   57,   36,
       57,   57,   51,   57,   57,   51,   35,   57,   51,   51,
       51,   57,   51,   57,   51,   51,   51,   51,   51,   51,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    1,    5,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   33,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,    1,   81,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[83] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[337] =
    {   0,
        0,    0,    0,    0,   77,   79,   83,   84,  189,  185,
      174,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,   78,   76,  149,   82,   86,  147,  672,  108,  672,
      102,  672,   71,    0,   80,   81,   70,   98,  123,   78,
       59,  130,   63,   97,  103,  132,   83,  137,  102,  120,
      672,  672,  672,  672,  672,  672,  672,  173,  672,  129,
      672,  672,  205,  672,  672,  672,  672,  165,  168,  672,
      182,  201,  205,  672,  672,  672,    0,  165,  188,  173,
      130,  135,  179,  189,  188,  186,  185,  203,    0,  185,
      207,  200,  195,  209,  203,    0,  208,  239,  216,  228,

      209,  216,  210,  248,  219,  234,  260,  251,  247,  245,
      253,  267,  257,  244,  267,  258,  672,  672,  672,  672,
      672,  672,  672,  292,  307,  267,  288,    0,  273,  285,
      280,  305,  293,  291,  313,  298,  297,  314,  316,    0,
      302,  323,  321,  310,  310,  318,  320,  322,  317,  333,
      330,  335,  324,  336,  332,    0,  344,  326,  359,  351,
      351,  368,  350,  370,  357,  371,  378,  368,  378,  374,
      379,  379,  380,  388,  380,    0,  376,  378,  379,  395,
      394,  395,  390,  406,  393,  412,  411,  404,  416,  412,
      417,  414,  417,  432,  419,    0,  433,  432,  426,  440,

      429,    0,  438,    0,    0,  439,    0,    0,  441,  433,
      449,  444,  449,  442,  452,  441,  456,  449,    0,    0,
      466,  467,  463,  477,    0,    0,    0,    0,  471,  468,
      483,    0,    0,  470,  486,  481,    0,  480,  486,  494,
      496,  483,  492,    0,  489,  494,  496,  502,  510,  505,
        0,  510,  498,  501,  511,  516,  506,  521,  509,    0,
      514,  526,    0,  526,    0,  525,  535,    0,  522,  528,
        0,  530,  536,    0,    0,  548,    0,  554,  551,    0,
      541,  541,  542,  562,  545,  562,  551,  560,    0,  563,
        0,    0,    0,  555,  562,  557,  565,  561,    0,    0,

      578,  579,  573,    0,    0,    0,    0,  574,  584,    0,
      578,  591,    0,  592,  596,    0,    0,  597,    0,    0,
        0,  588,    0,  592,    0,    0,    0,    0,    0,    0,
      672,  663,  665,  667,  669,  110
    } ;

static const flex_int16_t yy_def[337] =
    {   0,
      331,    1,  332,  332,  333,  333,  334,  334,  335,  335,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
        0,  331,  331,  331,  331,  331
    } ;

static const flex_int16_t yy_nxt[755] =
    {   0,
       12,   12,   13,   14,   15,   12,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   34,
       34,   39,   34,   34,   40,   34,   41,   42,   43,   34,
       44,   45,   46,   47,   48,   49,   50,   34,   34,   51,
       12,   52,   53,   12,   33,   34,   35,   36,   37,   38,
       34,   34,   39,   34,   40,   34,   41,   42,   43,   34,
       44,   45,   46,   47,   48,   49,   50,   34,   34,   54,
       55,   56,   58,   59,   58,   59,   62,   62,   63,   63,
       66,   69,   69,   67,   68,   71,  101,   72,   72,   71,

       78,   73,   73,  106,   90,   79,   91,   80,   88,   99,
       83,   77,   81,   82,   84,  100,   92,   85,   89,  112,
       86,   93,   76,   87,  107,   94,  101,   60,   75,   60,
      108,   78,  115,  106,   90,   79,   91,   80,   95,   88,
       99,   83,   81,   82,   84,  100,   92,   85,   89,  112,
       86,   96,   93,   87,  102,  107,   94,  116,   97,   98,
      113,  108,  109,  115,  103,  123,  104,   74,   95,   70,
      105,  130,  110,  331,  114,  111,  117,  131,  118,  119,
      124,  124,   96,   69,   69,  102,   65,  116,   97,   98,
       65,  113,  126,  109,  103,  123,  104,  125,  125,  129,

      105,  130,  110,  120,  114,  111,  132,  131,  117,  121,
      118,  119,  133,  135,   71,  122,   72,   72,   71,  127,
       73,   73,  128,  126,  134,  136,  139,  137,  331,  144,
      129,  138,  145,  140,  120,  120,  156,  132,  142,  121,
      146,  121,  143,  133,  135,  122,  147,  122,  141,  151,
      127,  154,  128,  152,  134,  136,  139,  155,  137,  144,
      159,  160,  138,  145,  140,  153,  120,  156,  142,  148,
      146,  121,  143,  157,  168,  174,  147,  122,  141,  151,
      149,  154,  158,  150,  152,  166,  161,  155,  169,  167,
      159,  170,  160,  171,  175,  153,  162,  173,  176,  163,

      148,  164,  165,  177,  157,  168,  174,  124,  124,  172,
      149,  178,  158,  150,  179,  166,  180,  161,  169,  167,
      181,  170,  125,  125,  171,  175,  162,  173,  176,  163,
      182,  164,  165,  177,  183,  184,  185,  331,  186,  172,
      187,  188,  178,  189,  179,  190,  191,  180,  193,  199,
      181,  194,  195,  196,  198,  200,  201,  202,  203,  331,
      192,  182,  204,  205,  183,  184,  197,  185,  186,  206,
      187,  207,  188,  208,  189,  190,  210,  191,  211,  193,
      199,  194,  195,  196,  198,  200,  209,  201,  202,  203,
      192,  212,  204,  213,  205,  214,  197,  216,  217,  206,

      159,  218,  207,  208,  219,  220,  222,  210,  221,  211,
      223,  224,  331,  215,  225,  331,  226,  209,  227,  228,
      179,  229,  212,  213,  230,  231,  214,  216,  232,  217,
      159,  233,  218,  234,  219,  235,  220,  222,  221,  236,
      237,  223,  224,  215,  238,  225,  226,  239,  227,  228,
      179,  229,  240,  241,  242,  230,  231,  243,  232,  244,
      246,  233,  245,  247,  234,  235,  248,  249,  331,  250,
      236,  237,  251,  252,  238,  253,  254,  255,  239,  256,
      257,  261,  240,  241,  242,  258,  259,  243,  260,  262,
      244,  246,  245,  263,  247,  264,  248,  265,  249,  250,

      266,  267,  251,  252,  268,  253,  254,  269,  255,  256,
      270,  257,  261,  271,  274,  258,  259,  272,  260,  262,
      273,  275,  276,  281,  263,  277,  264,  265,  278,  279,
      280,  266,  267,  282,  268,  283,  284,  285,  269,  286,
      270,  287,  288,  289,  271,  274,  290,  272,  291,  294,
      273,  292,  275,  276,  281,  277,  293,  295,  278,  279,
      280,  296,  297,  301,  282,  298,  283,  284,  285,  286,
      299,  287,  300,  288,  289,  302,  290,  303,  304,  291,
      294,  292,  305,  306,  307,  308,  293,  309,  295,  310,
      313,  296,  311,  297,  301,  298,  312,  314,  315,  316,

      299,  317,  300,  318,  319,  320,  302,  321,  303,  304,
      322,  323,  305,  306,  307,  324,  308,  309,  325,  326,
      310,  313,  311,  327,  328,  331,  312,  314,  315,  316,
      329,  317,  330,  318,  331,  319,  320,  321,  331,  331,
      322,  331,  323,  331,  331,  324,  331,  331,  331,  325,
      326,  331,  331,  331,  327,  328,  331,  331,  331,  331,
      329,  331,  330,   12,   12,   57,   57,   61,   61,   64,
       64,   11,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331
    } ;

static const flex_int16_t yy_chk[755] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,    7,    8,    7,    8,
       22,   23,   23,   22,   22,   25,   41,   25,   25,   26,

       33,   26,   26,   43,   37,   33,   37,   33,   36,   40,
       35,  336,   33,   33,   35,   40,   37,   35,   36,   47,
       35,   38,   31,   35,   44,   38,   41,    5,   29,    6,
       45,   33,   49,   43,   37,   33,   37,   33,   38,   36,
       40,   35,   33,   33,   35,   40,   37,   35,   36,   47,
       35,   39,   38,   35,   42,   44,   38,   50,   39,   39,
       48,   45,   46,   49,   42,   60,   42,   27,   38,   24,
       42,   81,   46,   11,   48,   46,   58,   82,   58,   58,
       68,   68,   39,   69,   69,   42,   10,   50,   39,   39,
        9,   48,   78,   46,   42,   60,   42,   71,   71,   80,

       42,   81,   46,   58,   48,   46,   83,   82,   63,   58,
       63,   63,   84,   86,   72,   58,   72,   72,   73,   79,
       73,   73,   79,   78,   85,   87,   90,   88,    0,   93,
       80,   88,   94,   91,   58,   63,  103,   83,   92,   58,
       95,   63,   92,   84,   86,   58,   97,   63,   91,   99,
       79,  101,   79,  100,   85,   87,   90,  102,   88,   93,
      105,  106,   88,   94,   91,  100,   63,  103,   92,   98,
       95,   63,   92,  104,  109,  114,   97,   63,   91,   99,
       98,  101,  104,   98,  100,  108,  107,  102,  110,  108,
      105,  111,  106,  112,  115,  100,  107,  113,  116,  107,

       98,  107,  107,  126,  104,  109,  114,  124,  124,  112,
       98,  127,  104,   98,  129,  108,  130,  107,  110,  108,
      131,  111,  125,  125,  112,  115,  107,  113,  116,  107,
      132,  107,  107,  126,  133,  134,  135,    0,  136,  112,
      137,  138,  127,  139,  129,  141,  142,  130,  143,  148,
      131,  144,  145,  146,  147,  149,  150,  151,  152,    0,
      142,  132,  153,  154,  133,  134,  146,  135,  136,  155,
      137,  157,  138,  158,  139,  141,  160,  142,  161,  143,
      148,  144,  145,  146,  147,  149,  159,  150,  151,  152,
      142,  162,  153,  163,  154,  164,  146,  165,  166,  155,

      159,  167,  157,  158,  168,  169,  171,  160,  170,  161,
      172,  173,    0,  164,  174,    0,  175,  159,  177,  178,
      179,  179,  162,  163,  180,  181,  164,  165,  182,  166,
      159,  183,  167,  184,  168,  185,  169,  171,  170,  186,
      187,  172,  173,  164,  188,  174,  175,  189,  177,  178,
      179,  179,  190,  191,  192,  180,  181,  193,  182,  194,
      197,  183,  195,  198,  184,  185,  199,  200,    0,  201,
      186,  187,  203,  206,  188,  209,  210,  211,  189,  212,
      213,  217,  190,  191,  192,  214,  215,  193,  216,  218,
      194,  197,  195,  221,  198,  222,  199,  223,  200,  201,

      224,  229,  203,  206,  230,  209,  210,  231,  211,  212,
      234,  213,  217,  235,  239,  214,  215,  236,  216,  218,
      238,  240,  241,  247,  221,  242,  222,  223,  243,  245,
      246,  224,  229,  248,  230,  249,  250,  252,  231,  253,
      234,  254,  255,  256,  235,  239,  257,  236,  258,  262,
      238,  259,  240,  241,  247,  242,  261,  264,  243,  245,
      246,  266,  267,  273,  248,  269,  249,  250,  252,  253,
      270,  254,  272,  255,  256,  276,  257,  278,  279,  258,
      262,  259,  281,  282,  283,  284,  261,  285,  264,  286,
      290,  266,  287,  267,  273,  269,  288,  294,  295,  296,

      270,  297,  272,  298,  301,  302,  276,  303,  278,  279,
      308,  309,  281,  282,  283,  311,  284,  285,  312,  314,
      286,  290,  287,  315,  318,    0,  288,  294,  295,  296,
      322,  297,  324,  298,    0,  301,  302,  303,    0,    0,
      308,    0,  309,    0,    0,  311,    0,    0,    0,  312,
      314,    0,    0,    0,  315,  318,    0,    0,    0,    0,
      322,    0,  324,  332,  332,  333,  333,  334,  334,  335,
      335,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[60] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "eiffel.flex"
#line 2 "eiffel.flex"
	#include <math.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <conio.h>
	#include <locale.h> 

#line 0 "eiffel.flex.c"




#line 0 "eiffel.flex.c"



#define INITIAL 0
#define SPECIAL_CHAR 1
#define SINGLE_QUOTED_CHAR 2
#define DOUBLE_QUOTED_STRING 3
#define SINGLE_LINE_COMMENT 4




    
/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif




static int yy_init_globals ( void );


/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( void );



int yyget_debug ( void );



void yyset_debug ( int debug_flag  );



YY_EXTRA_TYPE yyget_extra ( void );



void yyset_extra ( YY_EXTRA_TYPE user_defined  );



FILE *yyget_in ( void );



void yyset_in  ( FILE * _in_str  );



FILE *yyget_out ( void );



void yyset_out  ( FILE * _out_str  );



			int yyget_leng ( void );



char *yyget_text ( void );



int yyget_lineno ( void );



void yyset_lineno ( int _line_number  );







/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1









extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


