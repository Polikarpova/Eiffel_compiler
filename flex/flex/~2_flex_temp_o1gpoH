#line 0 "eiffel.flex.c"


#line 0 "eiffel.flex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */











#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif




























/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */


/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0


/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))






























/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;



	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */


/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */



/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]



/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;


void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );


static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );


void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext






static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );




/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 50
#define YY_END_OF_BUFFER 51
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[326] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       51,   50,   49,   40,    7,   43,    1,   30,   31,   19,
       17,   38,   18,   37,   20,   46,   46,   36,   29,   21,
       15,   23,   39,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   34,   35,   25,   32,   33,    3,    5,    6,    5,
        8,    9,   11,   12,   49,   10,   46,   46,   47,   16,
       47,    0,   46,   14,   22,   24,   48,   48,   48,   48,
       13,   48,   48,   48,   48,   48,   48,   48,   13,   48,
       48,   48,   48,   48,   48,   13,   48,   48,   48,   48,

       48,   48,   48,   48,   13,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,    2,   46,   47,   48,
       48,   13,   13,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   13,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   13,   48,   13,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   13,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   13,   48,   48,   48,   48,   48,   48,   13,
       48,   48,   48,   48,   48,   13,   48,   13,   13,   48,

       13,   13,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   13,   44,   48,   48,   48,   48,   45,   13,
       13,   13,   48,   48,   48,   13,   13,   48,   48,   48,
       13,   48,   48,   48,   48,   48,   48,   44,   48,   48,
       48,   48,   48,   48,   13,   48,   48,   48,   48,   48,
       48,   48,   48,   13,   48,   48,   13,   48,   13,   48,
       48,   13,   48,   48,   13,   48,   48,   13,   13,   48,
       13,   48,   48,   13,   48,   48,   48,   48,   48,   48,
       48,   48,   13,   48,   13,   13,   13,   48,   48,   48,
       48,   48,   13,   13,   48,   48,   48,   13,   13,   13,

       13,   48,   48,   13,   48,   48,   13,   48,   48,   13,
       13,   48,   13,   13,   13,   48,   13,   48,   13,   13,
       13,   13,   13,   13,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   34,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,    1,   82,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[331] =
    {   0,
        0,    0,    0,    0,   76,   77,   81,   82,  214,  172,
      171,  654,   88,  654,  654,  654,  654,  654,  654,  654,
      654,  654,   78,   76,  110,   82,   86,  108,  654,  102,
      654,   91,  654,   71,    0,   80,   81,   70,   98,  123,
       78,   66,  130,   79,   97,  102,  131,   96,  144,  142,
      120,  654,  654,  654,  654,  654,  654,  654,  654,  127,
      654,  654,  654,  654,  175,  654,  654,  162,  164,  654,
      168,  192,  197,  654,  654,  654,    0,  159,  168,  164,
      124,  155,  164,  183,  173,  187,  176,  195,    0,  177,
      194,  187,  192,  208,  191,    0,  195,  208,  201,  216,

      194,  199,  216,  242,  203,  220,  245,  251,  230,  217,
      223,  251,  235,  237,  267,  240,  654,  280,  285,  256,
      274,    0,  262,  273,  267,  284,  271,  269,  295,  280,
      278,  297,  299,    0,  286,  304,  303,  291,  292,  304,
      302,  317,  300,  322,  319,  324,  315,  321,  317,    0,
      329,  313,  340,  338,  338,  347,  329,  348,  340,  347,
      362,  352,  359,  355,  365,  362,  364,  371,  363,    0,
      358,  362,  365,  379,  378,  379,  372,  387,  378,  388,
      393,  385,  396,  391,  396,  394,  395,  411,  398,    0,
      417,  416,  409,  424,  414,    0,  422,    0,    0,  423,

        0,    0,  425,  417,  424,  428,  435,  425,  436,  425,
      448,  436,    0,    0,  447,  449,  446,  458,    0,    0,
        0,    0,  455,  452,  467,    0,    0,  454,  465,  459,
        0,  456,  471,  474,  477,  465,  473,    0,  471,  477,
      487,  484,  492,  488,    0,  493,  486,  488,  490,  502,
      491,  506,  493,    0,  494,  515,    0,  509,    0,  506,
      517,    0,  504,  507,    0,  511,  527,    0,    0,  528,
        0,  533,  532,    0,  521,  521,  525,  545,  528,  546,
      535,  542,    0,  547,    0,    0,    0,  538,  545,  540,
      548,  546,    0,    0,  563,  565,  560,    0,    0,    0,

        0,  559,  569,    0,  561,  574,    0,  575,  576,    0,
        0,  580,    0,    0,    0,  567,    0,  573,    0,    0,
        0,    0,    0,    0,  654,  645,  647,  649,  651,   96
    } ;

static const flex_int16_t yy_def[331] =
    {   0,
      325,    1,  326,  326,  327,  327,  328,  328,  329,  329,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  325,  325,  325,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,    0,  325,  325,  325,  325,  325
    } ;

static const flex_int16_t yy_nxt[738] =
    {   0,
       12,   13,   13,   14,   15,   16,   12,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       35,   35,   40,   35,   35,   41,   35,   42,   43,   44,
       35,   45,   46,   47,   48,   49,   50,   51,   35,   35,
       52,   12,   53,   54,   12,   34,   35,   36,   37,   38,
       39,   35,   35,   40,   35,   41,   35,   42,   43,   44,
       35,   45,   46,   47,   48,   49,   50,   51,   35,   35,
       55,   56,   57,   59,   59,   62,   62,   12,   12,   65,
       65,   66,   69,   69,   67,   68,   71,   77,   72,   72,

       71,   78,   73,   73,  101,   90,   79,   91,   80,   88,
       99,   83,   76,   81,   82,   84,  100,   92,   85,   89,
      106,   86,   93,   75,   87,  107,   94,   60,   60,   74,
      108,   70,   78,  112,  101,   90,   79,   91,   80,   95,
       88,   99,   83,   81,   82,   84,  100,   92,   85,   89,
      106,   86,   96,   93,   87,  102,  107,   94,  116,   97,
       98,  108,  109,  112,  117,  103,  124,  104,  113,   95,
      325,  105,  110,  115,   64,  111,   65,   65,  118,  118,
       69,   69,  114,   96,  119,  119,  102,  120,  116,   97,
       98,  123,  126,  109,  117,  103,  124,  104,  125,  113,

      121,  105,  110,  122,  115,  111,   71,  127,   72,   72,
      128,   71,  114,   73,   73,  129,   64,  130,  120,  133,
      131,  134,  123,  126,  132,  325,  136,  138,  125,  140,
      137,  121,  139,  122,  141,  145,  135,  148,  127,  142,
      128,  149,  146,  150,  325,  153,  129,  130,  154,  133,
      143,  131,  134,  144,  147,  132,  136,  138,  162,  140,
      137,  163,  164,  139,  141,  145,  135,  148,  151,  168,
      142,  149,  155,  146,  150,  153,  167,  152,  165,  154,
      143,  170,  156,  144,  147,  157,  160,  158,  159,  162,
      161,  163,  164,  171,  166,  169,  118,  118,  172,  151,

      168,  119,  119,  155,  173,  174,  167,  152,  175,  165,
      176,  170,  156,  177,  178,  157,  160,  158,  159,  179,
      161,  180,  181,  171,  166,  182,  169,  183,  185,  172,
      184,  187,  325,  188,  173,  189,  174,  192,  175,  194,
      190,  176,  186,  177,  178,  193,  195,  196,  197,  199,
      179,  180,  181,  191,  198,  200,  182,  201,  183,  185,
      184,  202,  187,  188,  204,  189,  205,  192,  203,  194,
      190,  206,  186,  207,  208,  211,  193,  195,  196,  197,
      199,  210,  153,  191,  198,  200,  212,  214,  201,  213,
      215,  202,  209,  216,  217,  204,  218,  205,  219,  203,

      220,  221,  206,  207,  222,  208,  211,  173,  223,  224,
      225,  210,  153,  226,  227,  228,  230,  212,  214,  213,
      215,  229,  209,  231,  216,  217,  232,  218,  233,  219,
      220,  221,  234,  235,  222,  236,  237,  173,  223,  238,
      224,  225,  239,  226,  227,  240,  228,  230,  241,  325,
      242,  229,  243,  249,  231,  244,  232,  245,  246,  233,
      247,  248,  234,  235,  250,  236,  237,  251,  325,  252,
      238,  253,  239,  254,  255,  257,  240,  256,  258,  241,
      242,  259,  260,  243,  249,  244,  261,  245,  246,  262,
      247,  248,  263,  265,  250,  264,  266,  267,  251,  252,

      268,  253,  269,  254,  270,  255,  257,  256,  271,  258,
      272,  259,  273,  260,  274,  275,  276,  261,  277,  262,
      278,  279,  282,  263,  265,  264,  266,  267,  280,  281,
      283,  268,  284,  269,  285,  270,  286,  287,  271,  288,
      272,  289,  273,  290,  274,  291,  275,  276,  292,  277,
      293,  278,  279,  282,  294,  295,  296,  297,  280,  281,
      298,  283,  284,  299,  300,  285,  286,  287,  301,  302,
      288,  303,  289,  290,  304,  307,  291,  305,  292,  306,
      293,  308,  309,  310,  294,  311,  295,  296,  297,  312,
      313,  298,  314,  299,  300,  315,  316,  317,  301,  318,

      302,  303,  319,  320,  321,  304,  307,  305,  322,  306,
      323,  308,  309,  310,  324,  311,  325,  325,  325,  312,
      325,  313,  325,  314,  325,  315,  316,  325,  317,  318,
      325,  325,  325,  319,  320,  321,  325,  325,  325,  322,
      323,  325,  325,  325,  324,   12,   12,   58,   58,   61,
       61,   63,   63,   11,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325
    } ;

static const flex_int16_t yy_chk[738] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,    7,    8,    7,    8,   13,
       13,   23,   24,   24,   23,   23,   26,  330,   26,   26,

       27,   34,   27,   27,   42,   38,   34,   38,   34,   37,
       41,   36,   32,   34,   34,   36,   41,   38,   36,   37,
       44,   36,   39,   30,   36,   45,   39,    5,    6,   28,
       46,   25,   34,   48,   42,   38,   34,   38,   34,   39,
       37,   41,   36,   34,   34,   36,   41,   38,   36,   37,
       44,   36,   40,   39,   36,   43,   45,   39,   51,   40,
       40,   46,   47,   48,   60,   43,   81,   43,   49,   39,
       11,   43,   47,   50,   10,   47,   65,   65,   68,   68,
       69,   69,   49,   40,   71,   71,   43,   78,   51,   40,
       40,   80,   83,   47,   60,   43,   81,   43,   82,   49,

       79,   43,   47,   79,   50,   47,   72,   84,   72,   72,
       85,   73,   49,   73,   73,   86,    9,   87,   78,   90,
       88,   91,   80,   83,   88,    0,   92,   93,   82,   95,
       92,   79,   94,   79,   97,   99,   91,  101,   84,   98,
       85,  102,  100,  103,    0,  105,   86,   87,  106,   90,
       98,   88,   91,   98,  100,   88,   92,   93,  109,   95,
       92,  110,  111,   94,   97,   99,   91,  101,  104,  114,
       98,  102,  107,  100,  103,  105,  113,  104,  112,  106,
       98,  116,  107,   98,  100,  107,  108,  107,  107,  109,
      108,  110,  111,  120,  112,  115,  118,  118,  121,  104,

      114,  119,  119,  107,  123,  124,  113,  104,  125,  112,
      126,  116,  107,  127,  128,  107,  108,  107,  107,  129,
      108,  130,  131,  120,  112,  132,  115,  133,  136,  121,
      135,  137,    0,  138,  123,  139,  124,  141,  125,  143,
      140,  126,  136,  127,  128,  142,  144,  145,  146,  148,
      129,  130,  131,  140,  147,  149,  132,  151,  133,  136,
      135,  152,  137,  138,  154,  139,  155,  141,  153,  143,
      140,  156,  136,  157,  158,  160,  142,  144,  145,  146,
      148,  159,  153,  140,  147,  149,  161,  163,  151,  162,
      164,  152,  158,  165,  166,  154,  167,  155,  168,  153,

      169,  171,  156,  157,  172,  158,  160,  173,  173,  174,
      175,  159,  153,  176,  177,  178,  180,  161,  163,  162,
      164,  179,  158,  181,  165,  166,  182,  167,  183,  168,
      169,  171,  184,  185,  172,  186,  187,  173,  173,  188,
      174,  175,  189,  176,  177,  191,  178,  180,  192,    0,
      193,  179,  194,  205,  181,  195,  182,  197,  200,  183,
      203,  204,  184,  185,  206,  186,  187,  207,    0,  208,
      188,  209,  189,  210,  211,  215,  191,  212,  216,  192,
      193,  217,  218,  194,  205,  195,  223,  197,  200,  224,
      203,  204,  225,  229,  206,  228,  230,  232,  207,  208,

      233,  209,  234,  210,  235,  211,  215,  212,  236,  216,
      237,  217,  239,  218,  240,  241,  242,  223,  243,  224,
      244,  246,  249,  225,  229,  228,  230,  232,  247,  248,
      250,  233,  251,  234,  252,  235,  253,  255,  236,  256,
      237,  258,  239,  260,  240,  261,  241,  242,  263,  243,
      264,  244,  246,  249,  266,  267,  270,  272,  247,  248,
      273,  250,  251,  275,  276,  252,  253,  255,  277,  278,
      256,  279,  258,  260,  280,  284,  261,  281,  263,  282,
      264,  288,  289,  290,  266,  291,  267,  270,  272,  292,
      295,  273,  296,  275,  276,  297,  302,  303,  277,  305,

      278,  279,  306,  308,  309,  280,  284,  281,  312,  282,
      316,  288,  289,  290,  318,  291,    0,    0,    0,  292,
        0,  295,    0,  296,    0,  297,  302,    0,  303,  305,
        0,    0,    0,  306,  308,  309,    0,    0,    0,  312,
      316,    0,    0,    0,  318,  326,  326,  327,  327,  328,
      328,  329,  329,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325
    } ;


/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[51] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "eiffel.flex"
#line 2 "eiffel.flex"
	#include <math.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <conio.h>
	#include <locale.h> 

#line 0 "eiffel.flex.c"




#line 0 "eiffel.flex.c"



#define INITIAL 0
#define SPECIAL_CHAR 1
#define SINGLE_QUOTED_CHAR 2
#define DOUBLE_QUOTED_STRING 3
#define SINGLE_LINE_COMMENT 4




    
/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif




static int yy_init_globals ( void );


/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( void );



int yyget_debug ( void );



void yyset_debug ( int debug_flag  );



YY_EXTRA_TYPE yyget_extra ( void );



void yyset_extra ( YY_EXTRA_TYPE user_defined  );



FILE *yyget_in ( void );



void yyset_in  ( FILE * _in_str  );



FILE *yyget_out ( void );



void yyset_out  ( FILE * _out_str  );



			int yyget_leng ( void );



char *yyget_text ( void );



int yyget_lineno ( void );



void yyset_lineno ( int _line_number  );







/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif








/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif



/* end tables serialization structures and prototypes */



/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1









extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



#define YY_RULE_SETUP \
	YY_USER_ACTION


